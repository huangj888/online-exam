{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamRecordDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamRecordDetail.vue","mtime":1683548887961},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport { getExamDetail, getQuestionDetail, getExamRecordDetail } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ExamRecordDetail',\r\n  components: {\r\n    UserMenu\r\n  },\r\n  data () {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 考试记录详情对象\r\n      recordDetail: {},\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 题目的正确答案\r\n      answersRightMap: {},\r\n      // 题目的作答结果(正确或错误)\r\n      resultsMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\r\n      radioRightValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\r\n      checkRightValues: [],\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * 当前题目用户是否作答正确\r\n     * */\r\n    questionRight () {\r\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True'\r\n    }\r\n  },\r\n  mounted () {\r\n    this.answersMap = new Map()\r\n    this.answersRightMap = new Map()\r\n    this.resultsMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\r\n    getExamDetail(this.$route.params.exam_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          // 赋值考试对象\r\n          that.examDetail = res.data\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n    // 查看考试记录详情，渲染到前端界面\r\n    getExamRecordDetail(this.$route.params.record_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          // 赋值考试对象\r\n          that.recordDetail = res.data\r\n          // 赋值用户的作答答案\r\n          that.objToMap()\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试记录详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n  },\r\n  methods: {\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    /**\r\n     * 把后端传过来的对象Object转换成Map\r\n     **/\r\n    objToMap () {\r\n      for (const item in this.recordDetail.answersMap) {\r\n        this.answersMap.set(item, this.recordDetail.answersMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.answersRightMap) {\r\n        this.answersRightMap.set(item, this.recordDetail.answersRightMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.resultsMap) {\r\n        this.resultsMap.set(item, this.recordDetail.resultsMap[item])\r\n      }\r\n    },\r\n    getQuestionDetail (questionId) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.radioRightValue = ''\r\n      this.checkValues = []\r\n      this.checkRightValues = []\r\n      getQuestionDetail(questionId)\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 赋值当前考试对象\r\n            that.currentQuestion = res.data\r\n            // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n            if (that.answersMap.get(that.currentQuestion.id)) {\r\n              // 说明之前做过这道题了\r\n              if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n                that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n                that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0]\r\n              } else if (that.currentQuestion.type === '多选题') {\r\n                // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n                Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n                Object.assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id))\r\n              }\r\n            }\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '获取问题详情失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ExamRecordDetail.vue"],"names":[],"mappingsfile":"ExamRecordDetail.vue","sourceRoot":"src/views/list","sourcesContent":["<template>\r\n  <a-layout>\r\n    <a-layout-header class=\"header\" style=\"color: #fff\">\r\n      <!--   v-if=\"examDetail.exam\" 是为了防止 异步请求时页面渲染的时候还没有拿到这个值而报错， 下面多处这个判断都是这个道理 -->\r\n      <span style=\"font-size:25px;margin-left: 0px;\" v-if=\"examDetail.exam\">\r\n        <a-avatar slot=\"avatar\" size=\"large\" shape=\"circle\" :src=\"examDetail.exam.examAvatar | imgSrcFilter\"/>\r\n        {{ examDetail.exam.examName }}\r\n        <span style=\"font-size:15px;\">{{ examDetail.exam.examDescription }} </span>\r\n      </span>\r\n      <span style=\"float: right;\">\r\n        <span style=\"margin-right: 40px; font-size: 20px\" v-if=\"recordDetail.examRecord\">\r\n          考试得分：<span style=\"color: red\">{{ recordDetail.examRecord.examJoinScore }}</span>&nbsp;分&nbsp;\r\n          <span style=\"font-size:15px;\">参加考试时间：{{ recordDetail.examRecord.examJoinDate }}</span>\r\n        </span>\r\n        <a-avatar class=\"avatar\" size=\"small\" :src=\"avatar()\"/>\r\n        <span style=\"margin-left: 12px\">{{ nickname() }}</span>\r\n      </span>\r\n    </a-layout-header>\r\n    <a-layout>\r\n      <a-layout-sider width=\"190\" :style=\"{background: '#444',overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }\">\r\n        <a-menu\r\n          mode=\"inline\"\r\n          :defaultSelectedKeys=\"['1']\"\r\n          :defaultOpenKeys=\"['question_radio', 'question_check', 'question_judge']\"\r\n          :style=\"{ height: '100%', borderRight: 0 }\"\r\n        >\r\n          <a-sub-menu key=\"question_radio\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-circle\" theme=\"twoTone\"/>单选题(每题{{ examDetail.exam.examScoreRadio }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.radioIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\r\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_check\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-square\" theme=\"twoTone\"/>多选题(每题{{ examDetail.exam.examScoreCheck }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.checkIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\r\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_judge\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"like\" theme=\"twoTone\"/>判断题(每题{{ examDetail.exam.examScoreJudge }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.judgeIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\r\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n        </a-menu>\r\n      </a-layout-sider>\r\n      <a-layout :style=\"{ marginLeft: '200px' }\">\r\n        <a-layout-content :style=\"{ margin: '24px 16px 0',height: '84vh', overflow: 'initial' }\">\r\n          <div :style=\"{ padding: '24px', background: '#fff',height: '84vh'}\">\r\n            <span v-if=\"currentQuestion === ''\" style=\"font-size: 30px;font-family: Consolas\">欢迎查看本次考试情况，点击左侧题目编号可以查看答题详情</span>\r\n            <span v-if=\"currentQuestion !== ''\">\r\n              <strong>{{ currentQuestion.type }} </strong> <p v-html=\"currentQuestion.name\"></p>\r\n              <strong style=\"color: green;\" v-if=\"questionRight\">本题您答对啦！</strong>\r\n              <strong style=\"color: red;\" v-if=\"!questionRight\">本题您答错啦！</strong>\r\n            </span>\r\n            <br><br>\r\n            <!-- 单选题和判断题 --> <!-- key不重复只需要在一个for循环中保证即可 -->\r\n            <a-radio-group v-model=\"radioValue\" v-if=\"currentQuestion.type === '单选题' || currentQuestion.type === '判断题'\">\r\n              <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-radio>\r\n            </a-radio-group>\r\n\r\n            <!-- 题目出错的时候才显示这块 -->\r\n            <div v-if=\"!questionRight && currentQuestion!=='' && (currentQuestion.type === '单选题' || currentQuestion.type === '判断题')\">\r\n              <span style=\"color: red;\"><br/>正确答案是：<br/></span>\r\n              <a-radio-group v-model=\"radioRightValue\">\r\n                <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                  {{ option.questionOptionContent }}\r\n                </a-radio>\r\n              </a-radio-group>\r\n            </div>\r\n\r\n            <!-- 多选题 -->\r\n            <a-checkbox-group v-model=\"checkValues\" v-if=\"currentQuestion.type === '多选题'\">\r\n              <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-checkbox>\r\n            </a-checkbox-group>\r\n\r\n            <!-- 题目出错的时候才显示这块 -->\r\n            <div v-if=\"!questionRight && currentQuestion!=='' && currentQuestion.type === '多选题'\">\r\n              <span style=\"color: red;\"><br/>正确答案是：<br/></span>\r\n              <a-checkbox-group v-model=\"checkRightValues\">\r\n                <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                  {{ option.questionOptionContent }}\r\n                </a-checkbox>\r\n              </a-checkbox-group>\r\n            </div>\r\n\r\n            <span style=\"color: red;\"><br/>答案解析：<br/></span>\r\n            <p v-html=\"currentQuestion.description\"></p>\r\n          </div>\r\n        </a-layout-content>\r\n        <a-layout-footer :style=\"{ textAlign: 'center' }\">\r\n          Spting Boot Online Exam ©2020 Created by Liang Shan Guang\r\n        </a-layout-footer>\r\n      </a-layout>\r\n    </a-layout>\r\n  </a-layout>\r\n</template>\r\n\r\n<script>\r\nimport { getExamDetail, getQuestionDetail, getExamRecordDetail } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ExamRecordDetail',\r\n  components: {\r\n    UserMenu\r\n  },\r\n  data () {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 考试记录详情对象\r\n      recordDetail: {},\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 题目的正确答案\r\n      answersRightMap: {},\r\n      // 题目的作答结果(正确或错误)\r\n      resultsMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\r\n      radioRightValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\r\n      checkRightValues: [],\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * 当前题目用户是否作答正确\r\n     * */\r\n    questionRight () {\r\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True'\r\n    }\r\n  },\r\n  mounted () {\r\n    this.answersMap = new Map()\r\n    this.answersRightMap = new Map()\r\n    this.resultsMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\r\n    getExamDetail(this.$route.params.exam_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          // 赋值考试对象\r\n          that.examDetail = res.data\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n    // 查看考试记录详情，渲染到前端界面\r\n    getExamRecordDetail(this.$route.params.record_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          // 赋值考试对象\r\n          that.recordDetail = res.data\r\n          // 赋值用户的作答答案\r\n          that.objToMap()\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试记录详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n  },\r\n  methods: {\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    /**\r\n     * 把后端传过来的对象Object转换成Map\r\n     **/\r\n    objToMap () {\r\n      for (const item in this.recordDetail.answersMap) {\r\n        this.answersMap.set(item, this.recordDetail.answersMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.answersRightMap) {\r\n        this.answersRightMap.set(item, this.recordDetail.answersRightMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.resultsMap) {\r\n        this.resultsMap.set(item, this.recordDetail.resultsMap[item])\r\n      }\r\n    },\r\n    getQuestionDetail (questionId) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.radioRightValue = ''\r\n      this.checkValues = []\r\n      this.checkRightValues = []\r\n      getQuestionDetail(questionId)\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 赋值当前考试对象\r\n            that.currentQuestion = res.data\r\n            // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n            if (that.answersMap.get(that.currentQuestion.id)) {\r\n              // 说明之前做过这道题了\r\n              if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n                that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n                that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0]\r\n              } else if (that.currentQuestion.type === '多选题') {\r\n                // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n                Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n                Object.assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id))\r\n              }\r\n            }\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '获取问题详情失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}