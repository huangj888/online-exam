{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\components\\SettingDrawer\\SettingDrawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\components\\SettingDrawer\\SettingDrawer.vue","mtime":1683548887943},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport { DetailList } from '../../components'\r\nimport SettingItem from './SettingItem'\r\nimport config from '../../config/defaultSettings'\r\nimport { updateTheme, updateColorWeak, colorList } from './settingConfig'\r\nimport { mixin, mixinDevice } from '../../utils/mixin'\r\n\r\nexport default {\r\n  components: {\r\n    DetailList,\r\n    SettingItem\r\n  },\r\n  mixins: [mixin, mixinDevice],\r\n  data () {\r\n    return {\r\n      visible: true,\r\n      colorList,\r\n      baseConfig: Object.assign({}, config)\r\n    }\r\n  },\r\n  watch: {\r\n\r\n  },\r\n  mounted () {\r\n    const vm = this\r\n    setTimeout(() => {\r\n      vm.visible = false\r\n    }, 16)\r\n    // 当主题色不是默认色时，才进行主题编译\r\n    if (this.primaryColor !== config.primaryColor) {\r\n      updateTheme(this.primaryColor)\r\n    }\r\n    if (this.colorWeak !== config.colorWeak) {\r\n      updateColorWeak(this.colorWeak)\r\n    }\r\n  },\r\n  methods: {\r\n    showDrawer () {\r\n      this.visible = true\r\n    },\r\n    onClose () {\r\n      this.visible = false\r\n    },\r\n    toggle () {\r\n      this.visible = !this.visible\r\n    },\r\n    onColorWeak (checked) {\r\n      this.baseConfig.colorWeak = checked\r\n      this.$store.dispatch('ToggleWeak', checked)\r\n      updateColorWeak(checked)\r\n    },\r\n    onMultiTab (checked) {\r\n      this.baseConfig.multiTab = checked\r\n      this.$store.dispatch('ToggleMultiTab', checked)\r\n    },\r\n    handleMenuTheme (theme) {\r\n      this.baseConfig.navTheme = theme\r\n      this.$store.dispatch('ToggleTheme', theme)\r\n    },\r\n    doCopy () {\r\n      const text = `export default {\r\n  primaryColor: '${this.baseConfig.primaryColor}', // primary color of ant design\r\n  navTheme: '${this.baseConfig.navTheme}', // theme for nav menu\r\n  layout: '${this.baseConfig.layout}', // nav menu position: sidemenu or topmenu\r\n  contentWidth: '${this.baseConfig.contentWidth}', // layout of content: Fluid or Fixed, only works when layout is topmenu\r\n  fixedHeader: ${this.baseConfig.fixedHeader}, // sticky header\r\n  fixSiderbar: ${this.baseConfig.fixSiderbar}, // sticky siderbar\r\n  autoHideHeader: ${this.baseConfig.autoHideHeader}, //  auto hide header\r\n  colorWeak: ${this.baseConfig.colorWeak},\r\n  multiTab: ${this.baseConfig.multiTab},\r\n  production: process.env.NODE_ENV === 'production' && process.env.VUE_APP_PREVIEW !== 'true',\r\n  // vue-ls options\r\n  storageOptions: {\r\n    namespace: 'pro__',\r\n    name: 'ls',\r\n    storage: 'local',\r\n  }\r\n}`\r\n      this.$copyText(text).then(message => {\r\n        console.log('copy', message)\r\n        this.$message.success('复制完毕')\r\n      }).catch(err => {\r\n        console.log('copy.err', err)\r\n        this.$message.error('复制失败')\r\n      })\r\n    },\r\n    handleLayout (mode) {\r\n      this.baseConfig.layout = mode\r\n      this.$store.dispatch('ToggleLayoutMode', mode)\r\n      // 因为顶部菜单不能固定左侧菜单栏，所以强制关闭\r\n      //\r\n      this.handleFixSiderbar(false)\r\n    },\r\n    handleContentWidthChange (type) {\r\n      this.baseConfig.contentWidth = type\r\n      this.$store.dispatch('ToggleContentWidth', type)\r\n    },\r\n    changeColor (color) {\r\n      this.baseConfig.primaryColor = color\r\n      if (this.primaryColor !== color) {\r\n        this.$store.dispatch('ToggleColor', color)\r\n        updateTheme(color)\r\n      }\r\n    },\r\n    handleFixedHeader (fixed) {\r\n      this.baseConfig.fixedHeader = fixed\r\n      this.$store.dispatch('ToggleFixedHeader', fixed)\r\n    },\r\n    handleFixedHeaderHidden (autoHidden) {\r\n      this.baseConfig.autoHideHeader = autoHidden\r\n      this.$store.dispatch('ToggleFixedHeaderHidden', autoHidden)\r\n    },\r\n    handleFixSiderbar (fixed) {\r\n      if (this.layoutMode === 'topmenu') {\r\n        this.baseConfig.fixSiderbar = false\r\n        this.$store.dispatch('ToggleFixSiderbar', false)\r\n        return\r\n      }\r\n      this.baseConfig.fixSiderbar = fixed\r\n      this.$store.dispatch('ToggleFixSiderbar', fixed)\r\n    }\r\n  }\r\n}\r\n",null]}