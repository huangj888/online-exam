{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepExamModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepExamModal.vue","mtime":1683548887963},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport '../../../plugins/summernote'\r\nimport $ from 'jquery'\r\nimport { getExamQuestionTypeList, examCreate } from '../../../api/exam'\r\n\r\nconst stepForms = [\r\n  ['name', 'elapse', 'desc'],\r\n  ['radioScore', 'checkScore', 'judgeScore'],\r\n  ['option']\r\n]\r\n\r\nexport default {\r\n  name: 'StepByStepExamModal',\r\n  data () {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 7 }\r\n      },\r\n      size: 'default',\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 13 }\r\n      },\r\n      visible: false,\r\n      confirmLoading: false,\r\n      currentStep: 0,\r\n      mdl: {},\r\n\r\n      form: this.$form.createForm(this),\r\n      // 单选题对象列表\r\n      radios: [],\r\n      // 多选题对象列表\r\n      checks: [],\r\n      // 判断题对象列表\r\n      judges: []\r\n    }\r\n  },\r\n  updated () {\r\n    this.initSummernote()\r\n  },\r\n  methods: {\r\n    initSummernote () {\r\n      console.log('初始化富文本插件')\r\n      $('#summernote-exam-avatar-create').summernote({\r\n        lang: 'zh-CN',\r\n        placeholder: '粘贴截图到这即可，图片最好不要大于80*80',\r\n        height: 200,\r\n        width: 320,\r\n        htmlMode: true,\r\n        toolbar: [],\r\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\r\n        fontNames: [\r\n          'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\r\n          'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\r\n          'Tahoma', 'Times New Roman', 'Verdana'\r\n        ]\r\n      })\r\n    },\r\n    create () {\r\n      this.visible = true\r\n      // 从后端数据获取单选题、多选题和判断题的列表\r\n      getExamQuestionTypeList().then(res => {\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          this.radios = res.data.radios\r\n          this.checks = res.data.checks\r\n          this.judges = res.data.judges\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取问题列表失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        this.$notification.error({\r\n          message: '获取问题列表失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n    handleNext (step) {\r\n      // 处理下一步或者完成事件\r\n      const { form: { validateFields } } = this\r\n      const currentStep = step + 1\r\n      if (currentStep <= 2) {\r\n        // stepForms\r\n        validateFields(stepForms[this.currentStep], (errors, values) => {\r\n          if (!errors) {\r\n            this.currentStep = currentStep\r\n          }\r\n        })\r\n        return\r\n      }\r\n      // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\r\n      this.confirmLoading = true\r\n      validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\r\n        values.avatar = $('#summernote-exam-avatar-create').summernote('code')\r\n        // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\r\n        values.radios = this.radios\r\n        values.checks = this.checks\r\n        values.judges = this.judges\r\n        console.log('提交数据到后端')\r\n        this.confirmLoading = false\r\n        if (!errors) {\r\n          // 在这里把创建的考试的内容(存放在values中)提交给后端接口，需要的参数都已经封装成values这个json啦\r\n          console.log('values:', values)\r\n          // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\r\n          examCreate(values).then(res => {\r\n            // 成功就跳转到结果页面\r\n            console.log(res)\r\n            if (res.code === 0) {\r\n              this.$notification.success({\r\n                message: '创建成功',\r\n                description: '考试创建成功'\r\n              })\r\n              // 关闭弹出框\r\n              this.visible = false\r\n              this.$emit('ok')\r\n            }\r\n          }).catch(err => {\r\n            // 失败就弹出警告消息\r\n            this.$notification.error({\r\n              message: '考试创建失败',\r\n              description: err.message\r\n            })\r\n          })\r\n        } else {\r\n          this.confirmLoading = false\r\n        }\r\n      })\r\n    },\r\n    backward () {\r\n      this.currentStep--\r\n    },\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n      this.currentStep = 0\r\n    },\r\n    // 改变选择的题目列表,这里需要分单选、多选和判断进行单独更新，下面的代码要针对radios、checks和judges分别适配\r\n    handleRadioChange (values) {\r\n      console.log(values)\r\n      // 更新单选题的信息\r\n      for (let i = 0; i < this.radios.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.radios[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.radios[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.radios[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新多选题信息\r\n    handleCheckChange (values) {\r\n      console.log(values)\r\n      // 更新单选题的信息\r\n      for (let i = 0; i < this.checks.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.checks[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.checks[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.checks[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新判断题信息\r\n    handleJudgeChange (values) {\r\n      console.log(values)\r\n      // 更新单选题的信息\r\n      for (let i = 0; i < this.judges.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.judges[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.judges[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.judges[i].checked = false\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",null]}