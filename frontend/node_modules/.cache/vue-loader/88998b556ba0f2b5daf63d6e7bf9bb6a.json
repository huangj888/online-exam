{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue","mtime":1683548887964},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport '../../../plugins/summernote'\r\nimport $ from 'jquery'\r\nimport { getQuestionSelection, questionCreate } from '../../../api/exam'\r\n\r\nconst stepForms = [[], ['type', 'category', 'level'], ['option']]\r\n\r\nexport default {\r\n  name: 'StepByStepQuestionModal',\r\n  data () {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 2 },\r\n        sm: { span: 2 }\r\n      },\r\n      size: 'default',\r\n      wrapperCol: {\r\n        xs: { span: 22 },\r\n        sm: { span: 22 }\r\n      },\r\n      // 单选和判断题的答案\r\n      answerOption: '',\r\n      // 多选题的答案\r\n      answerOptions: [],\r\n      visible: false,\r\n      confirmLoading: false,\r\n      currentStep: 0,\r\n      mdl: {},\r\n\r\n      form: this.$form.createForm(this),\r\n      categories: [],\r\n      levels: [],\r\n      types: [],\r\n      optionToAdd: '添加',\r\n      options: [],\r\n      judgeOptions: [\r\n        {\r\n          answer: false,\r\n          content: '正确'\r\n        },\r\n        {\r\n          answer: false,\r\n          content: '错误'\r\n        }\r\n      ],\r\n      type: ''\r\n    }\r\n  },\r\n  updated () {\r\n    this.initSummernote('summernote-question-name')\r\n    this.initSummernote('summernote-question-desc')\r\n  },\r\n  methods: {\r\n    initSummernote (divId) {\r\n      console.log('初始化富文本插件：' + divId)\r\n      $('#' + divId).summernote({\r\n        lang: 'zh-CN',\r\n        placeholder: '请输入内容',\r\n        height: 150,\r\n        width: '100%',\r\n        htmlMode: true,\r\n        toolbar: [\r\n          ['style', ['bold', 'italic', 'underline', 'clear']],\r\n          ['fontsize', ['fontsize']],\r\n          ['fontname', ['fontname']],\r\n          ['para', ['ul', 'ol', 'paragraph']]\r\n        ],\r\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\r\n        fontNames: [\r\n          'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\r\n          'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\r\n          'Tahoma', 'Times New Roman', 'Verdana'\r\n        ],\r\n        callbacks: {\r\n          onSubmit: function () {\r\n            this.richContent = $('#summernote').summernote('code')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getSummernoteContent (divId) {\r\n      return $('#' + divId).summernote('code')\r\n    },\r\n    create () {\r\n      this.visible = true\r\n      // const { form: { setFieldsValue } } = this\r\n      // this.$nextTick(() => {\r\n      //   setFieldsValue(pick(record, []))\r\n      // })\r\n      // 把data中的question属性提交到后端，待写完后端接口\r\n      getQuestionSelection().then(res => {\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          this.categories = res.data.categories\r\n          this.levels = res.data.levels\r\n          this.types = res.data.types\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取问题下拉选项失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        this.$notification.error({\r\n          message: '获取问题下拉选项失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n    handleNext (step) {\r\n      // 处理下一步或者完成事件\r\n      const { form: { validateFields } } = this\r\n      const currentStep = step + 1\r\n      if (currentStep <= 2) {\r\n        // stepForms\r\n        validateFields(stepForms[this.currentStep], (errors, values) => {\r\n          if (!errors) {\r\n            this.currentStep = currentStep\r\n            // 设置题目类型(单选1、多选2或判断3)，用于最后一步问题选项的展示\r\n            this.type = values.type\r\n            // 清空必要的数据\r\n            this.answerOptions = []\r\n            this.answerOption = ''\r\n            if (this.type === 3) {\r\n              // 如果是判断题的话，把选项直接改成正确和错误两种\r\n              this.options = this.judgeOptions\r\n            } else {\r\n              // 不是判断题那么每次要保证清空\r\n              this.options = []\r\n            }\r\n          }\r\n        })\r\n        return\r\n      }\r\n      // last step，最后一步，代表完成题目编写，需要点击\"完成\"创建题目\r\n      this.confirmLoading = true\r\n      validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\r\n        console.log('提交数据到后端')\r\n        console.log('errors:', errors, 'val:', values)\r\n        values.options = this.options\r\n        values.name = this.getSummernoteContent('summernote-question-name')\r\n        values.desc = this.getSummernoteContent('summernote-question-desc')\r\n        this.confirmLoading = false\r\n        if (!errors) {\r\n          console.log('values:', values)\r\n          // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\r\n          questionCreate(values).then(res => {\r\n            // 成功就跳转到结果页面\r\n            console.log(res)\r\n            if (res.code === 0) {\r\n              this.$notification.success({\r\n                message: '创建成功',\r\n                description: '问题创建成功'\r\n              })\r\n              // 关闭弹出框\r\n              this.visible = false\r\n              this.$emit('ok')\r\n            }\r\n          }).catch(err => {\r\n            // 失败就弹出警告消息\r\n            this.$notification.error({\r\n              message: '更新',\r\n              description: err.message\r\n            })\r\n          })\r\n        } else {\r\n          this.confirmLoading = false\r\n        }\r\n      })\r\n    },\r\n    backward () {\r\n      this.currentStep--\r\n    },\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n      this.currentStep = 0\r\n    },\r\n    addOption () {\r\n      console.log('添加选项')\r\n      // 这里需要把选项+是否是题目答案作为一个整体添加到options中\r\n      const { form: { validateFields } } = this\r\n      validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\r\n        console.log('errors:', errors, 'val:', values)\r\n        for (let i = 0; i < this.options.length; i++) {\r\n          const option = this.options[i]\r\n          if (option.content === values.option) {\r\n            this.$notification.error({\r\n              message: '错误',\r\n              description: '不要添加重复选项！'\r\n            })\r\n            return\r\n          }\r\n        }\r\n        const optionObj = { content: values.option, answer: false }\r\n        this.options.push(optionObj)\r\n        this.$notification.success({\r\n          message: '创建选项成功',\r\n          description: '请到\\'设置答案\\'下拉框去查看！'\r\n        })\r\n      })\r\n    },\r\n    // 单选问题改变选项\r\n    handleSingleChange (value) {\r\n      // 单选题的处理情况\r\n      for (let i = 0; i < this.options.length; i++) {\r\n        if (this.options[i].content === value) {\r\n          // 更新唯一的正确答案\r\n          this.options[i].answer = true\r\n          // 设置答案的内容\r\n          this.answerOption = this.options[i].content\r\n        } else {\r\n          // id不和答案相同地就设置为false，这样可以保证只有一个正确答案\r\n          this.options[i].answer = false\r\n        }\r\n      }\r\n      // 单选题的处理情况\r\n      console.log(`Selected: ${value}`)\r\n    },\r\n    // 多选问题改变选项\r\n    handleMultiChange (values) {\r\n      console.log(values)\r\n      // 直接更新选项id的数组\r\n      this.answerOptions = values\r\n      // 更新question中options的answer位置\r\n      for (let i = 0; i < this.options.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const content = this.options[i].content\r\n        let isAnswer = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (content === value) {\r\n            // 说明这个选项是答案，设置为是答案，直接退出\r\n            isAnswer = true\r\n            this.options[i].answer = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (isAnswer === false) {\r\n          this.options[i].answer = false\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",null]}