{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\components\\GlobalHeader\\GlobalHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\components\\GlobalHeader\\GlobalHeader.vue","mtime":1683548887939},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport UserMenu from '../tools/UserMenu'\r\nimport SMenu from '../Menu/'\r\nimport Logo from '../tools/Logo'\r\nimport { mixin } from '../../utils/mixin'\r\n\r\nexport default {\r\n  name: 'GlobalHeader',\r\n  components: {\r\n    UserMenu,\r\n    SMenu,\r\n    Logo\r\n  },\r\n  mixins: [mixin],\r\n  props: {\r\n    mode: {\r\n      type: String,\r\n      // sidemenu, topmenu\r\n      default: 'sidemenu'\r\n    },\r\n    menus: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    theme: {\r\n      type: String,\r\n      required: false,\r\n      default: 'dark'\r\n    },\r\n    collapsed: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    device: {\r\n      type: String,\r\n      required: false,\r\n      default: 'desktop'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      visible: true,\r\n      oldScrollTop: 0\r\n    }\r\n  },\r\n  mounted () {\r\n    document.body.addEventListener('scroll', this.handleScroll, { passive: true })\r\n  },\r\n  methods: {\r\n    handleScroll () {\r\n      if (!this.autoHideHeader) {\r\n        return\r\n      }\r\n\r\n      const scrollTop = document.body.scrollTop + document.documentElement.scrollTop\r\n      if (!this.ticking) {\r\n        this.ticking = true\r\n        requestAnimationFrame(() => {\r\n          if (this.oldScrollTop > scrollTop) {\r\n            this.visible = true\r\n          } else if (scrollTop > 300 && this.visible) {\r\n            this.visible = false\r\n          } else if (scrollTop < 300 && !this.visible) {\r\n            this.visible = true\r\n          }\r\n          this.oldScrollTop = scrollTop\r\n          this.ticking = false\r\n        })\r\n      }\r\n    },\r\n    toggle () {\r\n      this.$emit('toggle')\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    document.body.removeEventListener('scroll', this.handleScroll, true)\r\n  }\r\n}\r\n",null]}