{"remainingRequest":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue","mtime":1683974211506},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport '../../plugins/bootstrap-table'\r\nimport QuestionViewModal from './modules/QuestionViewModal'\r\nimport QuestionEditModal from './modules/QuestionEditModal'\r\nimport StepByStepQuestionModal from './modules/StepByStepQuestionModal'\r\nimport { getQuestionAll, questionUpdate, getQuestionSelection } from '../../api/exam'\r\nimport SummernoteUpdateModal from '@views/list/modules/SummernoteUpdateModal'\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n  name: 'QuestionTableList',\r\n  components: {\r\n    SummernoteUpdateModal,\r\n    StepByStepQuestionModal,\r\n    QuestionViewModal,\r\n    QuestionEditModal,\r\n  },\r\n  data() {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          },\r\n        },\r\n        {\r\n          title: '题干',\r\n          field: 'name',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-name\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-name': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit(\r\n                'summernote-question-name-update',\r\n                row,\r\n                'name',\r\n                '更新题干',\r\n                questionUpdate\r\n              )\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '解析',\r\n          field: 'description',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-desc\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-desc': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit(\r\n                'summernote-question-desc-update',\r\n                row,\r\n                'description',\r\n                '更新题目解析',\r\n                questionUpdate\r\n              )\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '分数',\r\n          field: 'score',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-score\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-score': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              $element.html('<input type=\"text\" value=\"' + value + '\">')\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '创建人',\r\n          field: 'creator',\r\n        },\r\n        {\r\n          title: '难度',\r\n          field: 'level',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-level': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const levels = res.data.levels\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < levels.length; i++) {\r\n                    if (levels[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        levels[i].id +\r\n                        '\" name=\"' +\r\n                        levels[i].name +\r\n                        '\" selected=\"selected\">' +\r\n                        levels[i].description +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        levels[i].id +\r\n                        '\" name=\"' +\r\n                        levels[i].name +\r\n                        '\">' +\r\n                        levels[i].description +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '题型',\r\n          field: 'type',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-type': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const types = res.data.types\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < types.length; i++) {\r\n                    if (types[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        types[i].id +\r\n                        '\" name=\"' +\r\n                        types[i].name +\r\n                        '\" selected=\"selected\">' +\r\n                        types[i].description +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        types[i].id +\r\n                        '\" name=\"' +\r\n                        types[i].name +\r\n                        '\">' +\r\n                        types[i].description +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '学科',\r\n          field: 'category',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-category': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const categories = res.data.categories\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < categories.length; i++) {\r\n                    if (categories[i].name === value) {\r\n                      // 学科还是用名字吧\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        categories[i].id +\r\n                        '\" name=\"' +\r\n                        categories[i].description +\r\n                        '\" selected=\"selected\">' +\r\n                        categories[i].name +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        categories[i].id +\r\n                        '\" name=\"' +\r\n                        categories[i].description +\r\n                        '\">' +\r\n                        categories[i].name +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '更新时间',\r\n          field: 'updateTime',\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return (\r\n              '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n              '&nbsp;&nbsp;' +\r\n              '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n            )\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        onDblClickCell: that.dblClickCell, // 单元格双击事件\r\n      },\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    handleEdit(record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub(record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleOk() {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    dblClickCell(field, value, row, $element) {\r\n      if (field === 'score') {\r\n        // 更新分数\r\n        const childrenInput = $element.children('.question-score').children('input') // 获取输入框的值\r\n        if (childrenInput.length === 0) return\r\n        row.score = childrenInput[0].value\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-score').text(row.score)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'level') {\r\n        // 更新难度\r\n        const childrenSelect = $element.children('.question-level').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.levelId = optionSelected.val()\r\n        console.log(row.levelId)\r\n        row.level = optionSelected.text()\r\n        console.log(row.level)\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-level').text(row.level)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'type') {\r\n        // 更新题型\r\n        const childrenSelect = $element.children('.question-type').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.typeId = optionSelected.val()\r\n        row.type = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-type').text(row.type)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'category') {\r\n        // 更新学科\r\n        const childrenSelect = $element.children('.question-category').children('select') // 获取输入框的值\r\n        console.log(childrenSelect)\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.categoryId = optionSelected.val()\r\n        row.category = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-category').text(row.category)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    loadAll() {\r\n      const that = this\r\n      getQuestionAll().then((res) => {\r\n        if (res.code === 0) {\r\n          that.tableData = res.data\r\n          that.$refs.table._initTable()\r\n        } else {\r\n          that.$notification.error({\r\n            message: '获取全部问题的列表失败',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n  },\r\n}\r\n",{"version":3,"sources":["QuestionTableList.vue"],"names":[],"mappings":";AAgfile":"QuestionTableList.vue","sourceRoot":"src/views/list","sourcesContent":["<template>\r\n  <a-card :bordered=\"false\">\r\n    <div id=\"toolbar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"$refs.createQuestionModal.create()\">新建</a-button>&nbsp;\r\n      <a-button type=\"primary\" icon=\"reload\" @click=\"loadAll()\">全量刷新</a-button>\r\n    </div>\r\n    <BootstrapTable ref=\"table\" :columns=\"columns\" :data=\"tableData\" :options=\"options\" />\r\n    <!-- ref是为了方便用this.$refs.modal直接引用，下同 -->\r\n    <step-by-step-question-modal ref=\"createQuestionModal\" @ok=\"handleOk\" />\r\n    <summernote-update-modal ref=\"questionUpdateModal\" @ok=\"handleOk\" />\r\n    <question-view-modal ref=\"modalView\" @ok=\"handleOk\" />\r\n    <question-edit-modal ref=\"modalEdit\" @ok=\"handleOk\" />\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\nimport '../../plugins/bootstrap-table'\r\nimport QuestionViewModal from './modules/QuestionViewModal'\r\nimport QuestionEditModal from './modules/QuestionEditModal'\r\nimport StepByStepQuestionModal from './modules/StepByStepQuestionModal'\r\nimport { getQuestionAll, questionUpdate, getQuestionSelection } from '../../api/exam'\r\nimport SummernoteUpdateModal from '@views/list/modules/SummernoteUpdateModal'\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n  name: 'QuestionTableList',\r\n  components: {\r\n    SummernoteUpdateModal,\r\n    StepByStepQuestionModal,\r\n    QuestionViewModal,\r\n    QuestionEditModal,\r\n  },\r\n  data() {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          },\r\n        },\r\n        {\r\n          title: '题干',\r\n          field: 'name',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-name\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-name': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit(\r\n                'summernote-question-name-update',\r\n                row,\r\n                'name',\r\n                '更新题干',\r\n                questionUpdate\r\n              )\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '解析',\r\n          field: 'description',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-desc\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-desc': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit(\r\n                'summernote-question-desc-update',\r\n                row,\r\n                'description',\r\n                '更新题目解析',\r\n                questionUpdate\r\n              )\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '分数',\r\n          field: 'score',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-score\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-score': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              $element.html('<input type=\"text\" value=\"' + value + '\">')\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '创建人',\r\n          field: 'creator',\r\n        },\r\n        {\r\n          title: '难度',\r\n          field: 'level',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-level': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const levels = res.data.levels\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < levels.length; i++) {\r\n                    if (levels[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        levels[i].id +\r\n                        '\" name=\"' +\r\n                        levels[i].name +\r\n                        '\" selected=\"selected\">' +\r\n                        levels[i].description +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        levels[i].id +\r\n                        '\" name=\"' +\r\n                        levels[i].name +\r\n                        '\">' +\r\n                        levels[i].description +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '题型',\r\n          field: 'type',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-type': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const types = res.data.types\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < types.length; i++) {\r\n                    if (types[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        types[i].id +\r\n                        '\" name=\"' +\r\n                        types[i].name +\r\n                        '\" selected=\"selected\">' +\r\n                        types[i].description +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        types[i].id +\r\n                        '\" name=\"' +\r\n                        types[i].name +\r\n                        '\">' +\r\n                        types[i].description +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '学科',\r\n          field: 'category',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-category': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then((res) => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const categories = res.data.categories\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < categories.length; i++) {\r\n                    if (categories[i].name === value) {\r\n                      // 学科还是用名字吧\r\n                      // 设置默认的选中值为当前的值\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        categories[i].id +\r\n                        '\" name=\"' +\r\n                        categories[i].description +\r\n                        '\" selected=\"selected\">' +\r\n                        categories[i].name +\r\n                        '</option>'\r\n                    } else {\r\n                      inner +=\r\n                        '<option value =\"' +\r\n                        categories[i].id +\r\n                        '\" name=\"' +\r\n                        categories[i].description +\r\n                        '\">' +\r\n                        categories[i].name +\r\n                        '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg,\r\n                  })\r\n                }\r\n              })\r\n            },\r\n          },\r\n        },\r\n        {\r\n          title: '更新时间',\r\n          field: 'updateTime',\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return (\r\n              '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n              '&nbsp;&nbsp;' +\r\n              '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n            )\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        onDblClickCell: that.dblClickCell, // 单元格双击事件\r\n      },\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    handleEdit(record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub(record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleOk() {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    dblClickCell(field, value, row, $element) {\r\n      if (field === 'score') {\r\n        // 更新分数\r\n        const childrenInput = $element.children('.question-score').children('input') // 获取输入框的值\r\n        if (childrenInput.length === 0) return\r\n        row.score = childrenInput[0].value\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-score').text(row.score)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'level') {\r\n        // 更新难度\r\n        const childrenSelect = $element.children('.question-level').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.levelId = optionSelected.val()\r\n        console.log(row.levelId)\r\n        row.level = optionSelected.text()\r\n        console.log(row.level)\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-level').text(row.level)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'type') {\r\n        // 更新题型\r\n        const childrenSelect = $element.children('.question-type').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.typeId = optionSelected.val()\r\n        row.type = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-type').text(row.type)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'category') {\r\n        // 更新学科\r\n        const childrenSelect = $element.children('.question-category').children('select') // 获取输入框的值\r\n        console.log(childrenSelect)\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.categoryId = optionSelected.val()\r\n        row.category = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then((res) => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-category').text(row.category)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功',\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    loadAll() {\r\n      const that = this\r\n      getQuestionAll().then((res) => {\r\n        if (res.code === 0) {\r\n          that.tableData = res.data\r\n          that.$refs.table._initTable()\r\n        } else {\r\n          that.$notification.error({\r\n            message: '获取全部问题的列表失败',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n"]}]}