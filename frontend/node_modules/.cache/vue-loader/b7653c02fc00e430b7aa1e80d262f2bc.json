{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\user\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\user\\Login.vue","mtime":1683548887965},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport TwoStepCaptcha from '../../components/tools/TwoStepCaptcha'\r\nimport { mapActions } from 'vuex'\r\nimport { timeFix } from '../../utils/util'\r\nimport { getSmsCaptcha, get2step } from '../../api/login'\r\n\r\nexport default {\r\n  components: {\r\n    TwoStepCaptcha\r\n  },\r\n  data () {\r\n    return {\r\n      customActiveKey: 'tab1',\r\n      loginBtn: false,\r\n      // login type: 0 email, 1 username, 2 telephone\r\n      loginType: 0,\r\n      requiredTwoStepCaptcha: false,\r\n      stepCaptchaVisible: false,\r\n      form: this.$form.createForm(this),\r\n      state: {\r\n        time: 60,\r\n        loginBtn: false,\r\n        // login type: 0 email, 1 username, 2 telephone\r\n        loginType: 0,\r\n        smsSendBtn: false\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    get2step({})\r\n      .then(res => {\r\n        this.requiredTwoStepCaptcha = res.result.stepCode\r\n      })\r\n      .catch(() => {\r\n        this.requiredTwoStepCaptcha = false\r\n      })\r\n    // this.requiredTwoStepCaptcha = true\r\n  },\r\n  methods: {\r\n    ...mapActions(['Login', 'Logout']), // 这个是从Vuex中直接继承过来，从而可以当本地方法用，见store/modules/user.js\r\n    // handler\r\n    handleUsernameOrEmail (rule, value, callback) {\r\n      const { state } = this\r\n      const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/\r\n      if (regex.test(value)) {\r\n        state.loginType = 0\r\n      } else {\r\n        state.loginType = 1\r\n      }\r\n      callback()\r\n    },\r\n    handleTabClick (key) {\r\n      this.customActiveKey = key\r\n      // this.form.resetFields()\r\n    },\r\n    handleSubmit (e) {\r\n      e.preventDefault()\r\n      const {\r\n        form: { validateFields },\r\n        state,\r\n        customActiveKey,\r\n        Login\r\n      } = this\r\n\r\n      state.loginBtn = true\r\n\r\n      const validateFieldsKey = customActiveKey === 'tab1' ? ['username', 'password'] : ['mobile', 'captcha']\r\n\r\n      validateFields(validateFieldsKey, { force: true }, (err, values) => {\r\n        console.log(values) // 打印用户的登录参数\r\n        if (!err) {\r\n          const loginParams = {} // 声明登录的参数\r\n          // delete loginParams.username\r\n          // loginParams[!state.loginType ? 'email' : 'username'] = values.username\r\n          loginParams.loginType = state.loginType // 登录类型，0 email, 1 username\r\n          loginParams.userInfo = values.username // 设置用户信息，因为email还是username不确定，所以用userinfo字段来代替\r\n          loginParams.password = values.password // 用户的密码，无加密\r\n          console.log(loginParams)\r\n          Login(loginParams) // 请求登录接口\r\n            .then((res) => this.loginSuccess(res)) // 成功\r\n            .catch(err => this.requestFailed(err)) // 失败\r\n            .finally(() => {\r\n              state.loginBtn = false // 不管登录成功与否，都要把按钮置灰，防止用户重复点击\r\n            })\r\n        } else {\r\n          setTimeout(() => {\r\n            state.loginBtn = false\r\n          }, 600)\r\n        }\r\n      })\r\n    },\r\n    getCaptcha (e) {\r\n      e.preventDefault()\r\n      const { form: { validateFields }, state } = this\r\n\r\n      validateFields(['mobile'], { force: true }, (err, values) => {\r\n        if (!err) {\r\n          state.smsSendBtn = true\r\n\r\n          const interval = window.setInterval(() => {\r\n            if (state.time-- <= 0) {\r\n              state.time = 60\r\n              state.smsSendBtn = false\r\n              window.clearInterval(interval)\r\n            }\r\n          }, 1000)\r\n\r\n          const hide = this.$message.loading('验证码发送中..', 0)\r\n          getSmsCaptcha({ mobile: values.mobile }).then(res => {\r\n            setTimeout(hide, 2500)\r\n            this.$notification['success']({\r\n              message: '提示',\r\n              description: '验证码获取成功，您的验证码为：' + res.result.captcha,\r\n              duration: 8\r\n            })\r\n          }).catch(err => {\r\n            setTimeout(hide, 1)\r\n            clearInterval(interval)\r\n            state.time = 60\r\n            state.smsSendBtn = false\r\n            this.requestFailed(err)\r\n          })\r\n        }\r\n      })\r\n    },\r\n    stepCaptchaSuccess () {\r\n      this.loginSuccess()\r\n    },\r\n    stepCaptchaCancel () {\r\n      this.Logout().then(() => {\r\n        this.loginBtn = false\r\n        this.stepCaptchaVisible = false\r\n      })\r\n    },\r\n    loginSuccess (res) {\r\n      console.log(res)\r\n      this.$router.push({ name: 'dashboard' })\r\n      // 延迟 1 秒显示欢迎信息\r\n      setTimeout(() => {\r\n        this.$notification.success({\r\n          message: '欢迎',\r\n          description: `${timeFix()}，欢迎回来`\r\n        })\r\n      }, 1000)\r\n    },\r\n    requestFailed (err) {\r\n      this.$notification['error']({\r\n        message: '错误',\r\n        description: ((err.response || {}).data || {}).message || '用户名或密码错误',\r\n        duration: 4\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}