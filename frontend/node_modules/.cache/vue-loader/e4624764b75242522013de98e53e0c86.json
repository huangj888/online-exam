{"remainingRequest":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\ExamEditModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\ExamEditModal.vue","mtime":1683548887963},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JuniorStudent\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport { getExamQuestionTypeList, examUpdate } from '../../../api/exam'\r\n\r\nconst stepForms = [\r\n  ['name', 'elapse', 'desc', 'avatar'],\r\n  ['radioScore', 'checkScore', 'judgeScore'],\r\n  ['option']\r\n]\r\n\r\nexport default {\r\n  name: 'ExamEditModal',\r\n  data () {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 7 }\r\n      },\r\n      size: 'default',\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 13 }\r\n      },\r\n      visible: false,\r\n      confirmLoading: false,\r\n      currentStep: 0,\r\n      mdl: {},\r\n      form: this.$form.createForm(this),\r\n      // 考试的对象\r\n      exam: {},\r\n      name: '',\r\n      elapse: 0,\r\n      desc: '',\r\n      avatar: '',\r\n      radioScore: 0,\r\n      checkScore: 0,\r\n      judgeScore: 0,\r\n      radios: [],\r\n      checks: [],\r\n      judges: [],\r\n      defaultRadios: [],\r\n      defaultChecks: [],\r\n      defaultJudges: []\r\n    }\r\n  },\r\n  methods: {\r\n    edit (exam) {\r\n      Object.assign(this.exam, exam) // 深度拷贝\r\n      this.visible = true\r\n      // 每次编辑需要先清空下之前的数据\r\n      this.radios = []\r\n      this.checks = []\r\n      this.judges = []\r\n      this.defaultRadios = []\r\n      this.defaultChecks = []\r\n      this.defaultJudges = []\r\n      this.name = exam.name\r\n      this.elapse = exam.elapse\r\n      this.desc = exam.desc\r\n      this.avatar = exam.avatar\r\n      this.radioScore = exam.radioScore\r\n      this.checkScore = exam.checkScore\r\n      this.judgeScore = exam.judgeScore\r\n      const that = this\r\n      // 从后端数据获取单选题、多选题和判断题的列表.在编辑的时候需要在点击\"编辑的时候传入进来\"\r\n      getExamQuestionTypeList().then(res => {\r\n        console.log(res)\r\n        if (res.code !== 0) {\r\n          that.$notification.error({\r\n            message: '获取问题列表失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n        console.log(res.data)\r\n        that.radios = res.data.radios\r\n        that.checks = res.data.checks\r\n        that.judges = res.data.judges\r\n        // 从exam里面的radios、checks、judges设置下上面的this里面的三个属性，把checked属性设置为true\r\n        for (let i = 0; i < exam.radios.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultRadios.push(exam.radios[i].name)\r\n        }\r\n        that.handleRadioChange(that.defaultRadios)\r\n        for (let i = 0; i < exam.checks.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultChecks.push(exam.checks[i].name)\r\n        }\r\n        that.handleCheckChange(that.defaultChecks)\r\n        for (let i = 0; i < exam.judges.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultJudges.push(exam.judges[i].name)\r\n        }\r\n        that.handleJudgeChange(that.defaultJudges)\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        this.$notification.error({\r\n          message: '获取问题列表失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n    handleNext (step) {\r\n      // 处理下一步或者完成事件\r\n      const { form: { validateFields } } = this\r\n      const currentStep = step + 1\r\n      if (currentStep <= 2) {\r\n        // stepForms\r\n        validateFields(stepForms[this.currentStep], (errors, values) => {\r\n          if (!errors) {\r\n            this.currentStep = currentStep\r\n          }\r\n        })\r\n        return\r\n      }\r\n      // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\r\n      this.confirmLoading = true\r\n      console.log('提交数据到后端')\r\n      this.confirmLoading = false\r\n      this.exam.name = this.name\r\n      this.exam.elapse = this.elapse\r\n      this.exam.desc = this.desc\r\n      this.exam.avatar = this.avatar\r\n      this.exam.radioScore = this.radioScore\r\n      this.exam.checkScore = this.checkScore\r\n      this.exam.judgeScore = this.judgeScore\r\n      // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\r\n      this.exam.radios = this.radios\r\n      this.exam.checks = this.checks\r\n      this.exam.judges = this.judges\r\n      const that = this\r\n      examUpdate(that.exam).then(res => {\r\n        // 成功就跳转到结果页面\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          that.$notification.success({\r\n            message: '更新成功',\r\n            description: '考试更新成功'\r\n          })\r\n          // 关闭弹出框\r\n          that.visible = false\r\n          that.currentStep = 0\r\n          that.$emit('ok')\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        that.$notification.error({\r\n          message: '考试更新失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    backward () {\r\n      this.currentStep--\r\n    },\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n      this.currentStep = 0\r\n    },\r\n    // 改变选择的题目列表,这里需要分单选、多选和判断进行单独更新，下面的代码要针对radios、checks和judges分别适配\r\n    handleRadioChange (values) {\r\n      console.log(values)\r\n      // 更新单选题的信息\r\n      for (let i = 0; i < this.radios.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.radios[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.radios[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.radios[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新多选题信息\r\n    handleCheckChange (values) {\r\n      console.log(values)\r\n      // 更新多选题的信息\r\n      for (let i = 0; i < this.checks.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.checks[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.checks[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.checks[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新判断题信息\r\n    handleJudgeChange (values) {\r\n      console.log(values)\r\n      // 更新判断题的信息\r\n      for (let i = 0; i < this.judges.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.judges[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.judges[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.judges[i].checked = false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ExamEditModal.vue"],"names":[],"mappingsfile":"ExamEditModal.vue","sourceRoot":"src/views/list/modules","sourcesContent":["<template>\r\n  <a-modal title=\"更新考试\" :width=\"640\" :visible=\"visible\" :confirmLoading=\"confirmLoading\" @cancel=\"handleCancel\">\r\n    <a-spin :spinning=\"confirmLoading\">\r\n      <a-steps :current=\"currentStep\" :style=\"{ marginBottom: '28px' }\" size=\"small\">\r\n        <a-step title=\"考试描述\" />\r\n        <a-step title=\"每题分数\" />\r\n        <a-step title=\"选择题目\" />\r\n      </a-steps>\r\n      <a-form :form=\"form\">\r\n        <!-- step1 -->\r\n        <div v-show=\"currentStep === 0\">\r\n          <a-form-item label=\"考试名称\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-input v-model=\"name\" />\r\n          </a-form-item>\r\n          <a-form-item label=\"考试限时\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-input-number :min=\"1\" :max=\"200\" v-model=\"elapse\" />\r\n            分钟\r\n          </a-form-item>\r\n          <a-form-item label=\"考试简述\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-textarea :rows=\"2\" v-model=\"desc\"></a-textarea>\r\n          </a-form-item>\r\n          <a-form-item label=\"考试封面\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <p>直接点击列表图片修改，建议图片不要大于80*80</p>\r\n          </a-form-item>\r\n        </div>\r\n        <div v-show=\"currentStep === 1\">\r\n          <a-form-item label=\"单选题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-input-number :min=\"1\" :max=\"20\" v-model=\"radioScore\" />\r\n            分\r\n          </a-form-item>\r\n          <a-form-item label=\"多选题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-input-number :min=\"1\" :max=\"20\" v-model=\"checkScore\" />\r\n            分\r\n          </a-form-item>\r\n          <a-form-item label=\"判断题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-input-number :min=\"1\" :max=\"20\" v-model=\"judgeScore\" />\r\n            分\r\n          </a-form-item>\r\n        </div>\r\n\r\n        <div v-show=\"currentStep === 2\">\r\n          <a-form-item label=\"选择单选题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" enterButton=\"Search\">\r\n            <!-- 单选 -->\r\n            <a-select\r\n              mode=\"multiple\"\r\n              :size=\"size\"\r\n              :default-value=\"defaultRadios\"\r\n              v-if=\"visible\"\r\n              placeholder=\"请选择单选题\"\r\n              style=\"width: 100%\"\r\n              @popupScroll=\"popupScroll\"\r\n              @change=\"handleRadioChange\"\r\n            >\r\n              <a-select-option v-for=\"radio in radios\" :value=\"radio.name\" :key=\"radio.id\">\r\n                {{ radio.name }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"选择多选题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" enterButton=\"Search\">\r\n            <!-- 多选 -->\r\n            <a-select\r\n              mode=\"multiple\"\r\n              :size=\"size\"\r\n              :default-value=\"defaultChecks\"\r\n              v-if=\"visible\"\r\n              placeholder=\"请选择多选题\"\r\n              style=\"width: 100%\"\r\n              @popupScroll=\"popupScroll\"\r\n              @change=\"handleCheckChange\"\r\n            >\r\n              <a-select-option v-for=\"check in checks\" :value=\"check.name\" :key=\"check.id\">\r\n                {{ check.name }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"选择判断题\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" enterButton=\"Search\">\r\n            <!-- 判断 -->\r\n            <a-select\r\n              mode=\"multiple\"\r\n              :size=\"size\"\r\n              :default-value=\"defaultJudges\"\r\n              v-if=\"visible\"\r\n              placeholder=\"请选择判断题\"\r\n              style=\"width: 100%\"\r\n              @popupScroll=\"popupScroll\"\r\n              @change=\"handleJudgeChange\">\r\n              <a-select-option v-for=\"judge in judges\" :value=\"judge.name\" :key=\"judge.id\">\r\n                {{ judge.name }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n        </div>\r\n      </a-form>\r\n    </a-spin>\r\n    <template slot=\"footer\">\r\n      <a-button key=\"back\" @click=\"backward\" v-if=\"currentStep > 0\" :style=\"{ float: 'left' }\">上一步</a-button>\r\n      <a-button key=\"cancel\" @click=\"handleCancel\">取消</a-button>\r\n      <a-button key=\"forward\" :loading=\"confirmLoading\" type=\"primary\" @click=\"handleNext(currentStep)\">\r\n        {{ currentStep === 2 && '完成' || '下一步' }}\r\n      </a-button>\r\n    </template>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\nimport { getExamQuestionTypeList, examUpdate } from '../../../api/exam'\r\n\r\nconst stepForms = [\r\n  ['name', 'elapse', 'desc', 'avatar'],\r\n  ['radioScore', 'checkScore', 'judgeScore'],\r\n  ['option']\r\n]\r\n\r\nexport default {\r\n  name: 'ExamEditModal',\r\n  data () {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 7 }\r\n      },\r\n      size: 'default',\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 13 }\r\n      },\r\n      visible: false,\r\n      confirmLoading: false,\r\n      currentStep: 0,\r\n      mdl: {},\r\n      form: this.$form.createForm(this),\r\n      // 考试的对象\r\n      exam: {},\r\n      name: '',\r\n      elapse: 0,\r\n      desc: '',\r\n      avatar: '',\r\n      radioScore: 0,\r\n      checkScore: 0,\r\n      judgeScore: 0,\r\n      radios: [],\r\n      checks: [],\r\n      judges: [],\r\n      defaultRadios: [],\r\n      defaultChecks: [],\r\n      defaultJudges: []\r\n    }\r\n  },\r\n  methods: {\r\n    edit (exam) {\r\n      Object.assign(this.exam, exam) // 深度拷贝\r\n      this.visible = true\r\n      // 每次编辑需要先清空下之前的数据\r\n      this.radios = []\r\n      this.checks = []\r\n      this.judges = []\r\n      this.defaultRadios = []\r\n      this.defaultChecks = []\r\n      this.defaultJudges = []\r\n      this.name = exam.name\r\n      this.elapse = exam.elapse\r\n      this.desc = exam.desc\r\n      this.avatar = exam.avatar\r\n      this.radioScore = exam.radioScore\r\n      this.checkScore = exam.checkScore\r\n      this.judgeScore = exam.judgeScore\r\n      const that = this\r\n      // 从后端数据获取单选题、多选题和判断题的列表.在编辑的时候需要在点击\"编辑的时候传入进来\"\r\n      getExamQuestionTypeList().then(res => {\r\n        console.log(res)\r\n        if (res.code !== 0) {\r\n          that.$notification.error({\r\n            message: '获取问题列表失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n        console.log(res.data)\r\n        that.radios = res.data.radios\r\n        that.checks = res.data.checks\r\n        that.judges = res.data.judges\r\n        // 从exam里面的radios、checks、judges设置下上面的this里面的三个属性，把checked属性设置为true\r\n        for (let i = 0; i < exam.radios.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultRadios.push(exam.radios[i].name)\r\n        }\r\n        that.handleRadioChange(that.defaultRadios)\r\n        for (let i = 0; i < exam.checks.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultChecks.push(exam.checks[i].name)\r\n        }\r\n        that.handleCheckChange(that.defaultChecks)\r\n        for (let i = 0; i < exam.judges.length; i++) { // 遍历所有的题目的选项\r\n          that.defaultJudges.push(exam.judges[i].name)\r\n        }\r\n        that.handleJudgeChange(that.defaultJudges)\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        this.$notification.error({\r\n          message: '获取问题列表失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n    handleNext (step) {\r\n      // 处理下一步或者完成事件\r\n      const { form: { validateFields } } = this\r\n      const currentStep = step + 1\r\n      if (currentStep <= 2) {\r\n        // stepForms\r\n        validateFields(stepForms[this.currentStep], (errors, values) => {\r\n          if (!errors) {\r\n            this.currentStep = currentStep\r\n          }\r\n        })\r\n        return\r\n      }\r\n      // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\r\n      this.confirmLoading = true\r\n      console.log('提交数据到后端')\r\n      this.confirmLoading = false\r\n      this.exam.name = this.name\r\n      this.exam.elapse = this.elapse\r\n      this.exam.desc = this.desc\r\n      this.exam.avatar = this.avatar\r\n      this.exam.radioScore = this.radioScore\r\n      this.exam.checkScore = this.checkScore\r\n      this.exam.judgeScore = this.judgeScore\r\n      // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\r\n      this.exam.radios = this.radios\r\n      this.exam.checks = this.checks\r\n      this.exam.judges = this.judges\r\n      const that = this\r\n      examUpdate(that.exam).then(res => {\r\n        // 成功就跳转到结果页面\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          that.$notification.success({\r\n            message: '更新成功',\r\n            description: '考试更新成功'\r\n          })\r\n          // 关闭弹出框\r\n          that.visible = false\r\n          that.currentStep = 0\r\n          that.$emit('ok')\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        that.$notification.error({\r\n          message: '考试更新失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    backward () {\r\n      this.currentStep--\r\n    },\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n      this.currentStep = 0\r\n    },\r\n    // 改变选择的题目列表,这里需要分单选、多选和判断进行单独更新，下面的代码要针对radios、checks和judges分别适配\r\n    handleRadioChange (values) {\r\n      console.log(values)\r\n      // 更新单选题的信息\r\n      for (let i = 0; i < this.radios.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.radios[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.radios[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.radios[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新多选题信息\r\n    handleCheckChange (values) {\r\n      console.log(values)\r\n      // 更新多选题的信息\r\n      for (let i = 0; i < this.checks.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.checks[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.checks[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.checks[i].checked = false\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新判断题信息\r\n    handleJudgeChange (values) {\r\n      console.log(values)\r\n      // 更新判断题的信息\r\n      for (let i = 0; i < this.judges.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const name = this.judges[i].name\r\n        // 当前问题是否被问题创建者选中\r\n        let checked = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (name === value) {\r\n            // 说明这个问题被考试创建者选中\r\n            checked = true\r\n            this.judges[i].checked = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (checked === false) {\r\n          this.judges[i].checked = false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}