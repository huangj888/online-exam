{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamRecordDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamRecordDetail.vue","mtime":1683548887961},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport { getExamDetail, getQuestionDetail, getExamRecordDetail } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ExamRecordDetail',\r\n  components: {\r\n    UserMenu\r\n  },\r\n  data () {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 考试记录详情对象\r\n      recordDetail: {},\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 题目的正确答案\r\n      answersRightMap: {},\r\n      // 题目的作答结果(正确或错误)\r\n      resultsMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\r\n      radioRightValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\r\n      checkRightValues: [],\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * 当前题目用户是否作答正确\r\n     * */\r\n    questionRight () {\r\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True'\r\n    }\r\n  },\r\n  mounted () {\r\n    this.answersMap = new Map()\r\n    this.answersRightMap = new Map()\r\n    this.resultsMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\r\n    getExamDetail(this.$route.params.exam_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          // 赋值考试对象\r\n          that.examDetail = res.data\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n    // 查看考试记录详情，渲染到前端界面\r\n    getExamRecordDetail(this.$route.params.record_id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          // 赋值考试对象\r\n          that.recordDetail = res.data\r\n          // 赋值用户的作答答案\r\n          that.objToMap()\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试记录详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n  },\r\n  methods: {\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    /**\r\n     * 把后端传过来的对象Object转换成Map\r\n     **/\r\n    objToMap () {\r\n      for (const item in this.recordDetail.answersMap) {\r\n        this.answersMap.set(item, this.recordDetail.answersMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.answersRightMap) {\r\n        this.answersRightMap.set(item, this.recordDetail.answersRightMap[item])\r\n      }\r\n\r\n      for (const item in this.recordDetail.resultsMap) {\r\n        this.resultsMap.set(item, this.recordDetail.resultsMap[item])\r\n      }\r\n    },\r\n    getQuestionDetail (questionId) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.radioRightValue = ''\r\n      this.checkValues = []\r\n      this.checkRightValues = []\r\n      getQuestionDetail(questionId)\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 赋值当前考试对象\r\n            that.currentQuestion = res.data\r\n            // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n            if (that.answersMap.get(that.currentQuestion.id)) {\r\n              // 说明之前做过这道题了\r\n              if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n                that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n                that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0]\r\n              } else if (that.currentQuestion.type === '多选题') {\r\n                // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n                Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n                Object.assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id))\r\n              }\r\n            }\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '获取问题详情失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n",null]}