{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\QuestionEditModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\QuestionEditModal.vue","mtime":1683548887963},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport '../../../plugins/summernote'\r\nimport $ from 'jquery'\r\nimport { questionUpdate } from '../../../api/exam'\r\n\r\nexport default {\r\n  // 问题查看的弹出框，用于查看问题/修改问题\r\n  name: 'QuestionEditModal',\r\n  data () {\r\n    return {\r\n      visible: false,\r\n      size: 'default',\r\n      confirmLoading: false,\r\n\r\n      form: this.$form.createForm(this),\r\n      // 每个问题\r\n      question: {},\r\n      // 单选和判断题的答案\r\n      answerOptionId: '',\r\n      // 多选题的答案\r\n      answerOptionIds: [],\r\n      radioStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px'\r\n      },\r\n      name: '',\r\n      desc: ''\r\n    }\r\n  },\r\n\r\n  updated () {\r\n    this.initSummernote('summernote-question-name-edit')\r\n    this.initSummernote('summernote-question-desc-edit')\r\n    this.setSummernoteContent('summernote-question-name-edit', this.name)\r\n    this.setSummernoteContent('summernote-question-desc-edit', this.desc)\r\n  },\r\n  methods: {\r\n    initSummernote (divId) {\r\n      console.log('初始化富文本插件：' + divId)\r\n      $('#' + divId).summernote({\r\n        lang: 'zh-CN',\r\n        placeholder: '请输入内容',\r\n        height: 200,\r\n        width: '100%',\r\n        htmlMode: true,\r\n        toolbar: [\r\n          ['style', ['bold', 'italic', 'underline', 'clear']],\r\n          ['fontsize', ['fontsize']],\r\n          ['fontname', ['fontname']],\r\n          ['para', ['ul', 'ol', 'paragraph']]\r\n        ],\r\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\r\n        fontNames: [\r\n          'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\r\n          'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\r\n          'Tahoma', 'Times New Roman', 'Verdana'\r\n        ],\r\n        callbacks: {\r\n          onSubmit: function () {\r\n            this.richContent = $('#summernote').summernote('code')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getSummernoteContent (divId) {\r\n      return $('#' + divId).summernote('code')\r\n    },\r\n    setSummernoteContent (divId, content) {\r\n      return $('#' + divId).summernote('code', content)\r\n    },\r\n    edit (record) {\r\n      this.name = record.name // 题干\r\n      this.desc = record.description // 解析\r\n      // 把当前的记录赋值到data中的变量\r\n      this.question = record\r\n      // 上来先把之前的清理干净\r\n      this.answerOptionId = ''\r\n      this.answerOptionIds = []\r\n      this.visible = true\r\n      // 单选题的处理情况,设置默认值\r\n      for (let i = 0; i < this.question.options.length; i++) {\r\n        if (this.question.options[i].answer === true) {\r\n          // 设置单选题或者判断题答案\r\n          this.answerOptionId = this.question.options[i].id\r\n          // 设置多选题的答案\r\n          this.answerOptionIds.push(this.question.options[i].id)\r\n        }\r\n      }\r\n    },\r\n\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n    },\r\n\r\n    handleSingleChange (value) {\r\n      // 单选题的处理情况\r\n      for (let i = 0; i < this.question.options.length; i++) {\r\n        if (this.question.options[i].id === value) {\r\n          // 更新唯一的正确答案\r\n          this.question.options[i].answer = true\r\n          // 设置答案的内容\r\n          this.answerOptionId = this.question.options[i].id\r\n        } else {\r\n          // id不和答案相同地就设置为false，这样可以保证只有一个正确答案\r\n          this.question.options[i].answer = false\r\n        }\r\n      }\r\n      console.log(`Selected: ${value}`)\r\n    },\r\n\r\n    handleMultiChange (values) {\r\n      console.log(values)\r\n      // 直接更新选项id的数组\r\n      this.answerOptionIds = values\r\n      // 更新question中options的answer位置\r\n      for (let i = 0; i < this.question.options.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const id = this.question.options[i].id\r\n        let isAnswer = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (id === value) {\r\n            // 说明这个选项是答案，设置为是答案，直接退出\r\n            isAnswer = true\r\n            this.question.options[i].answer = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (isAnswer === false) {\r\n          this.question.options[i].answer = false\r\n        }\r\n      }\r\n    },\r\n\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n\r\n    handleUpdate () {\r\n      const that = this\r\n      that.question.name = that.getSummernoteContent('summernote-question-name-edit')\r\n      that.question.description = that.getSummernoteContent('summernote-question-desc-edit')\r\n      console.log(that.question)\r\n      // 把data中的question属性提交到后端，待写完后端接口\r\n      questionUpdate(that.question).then(res => {\r\n        // 成功就跳转到结果页面\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          that.$notification.success({\r\n            message: '更新成功',\r\n            description: '问题更新成功'\r\n          })\r\n          // 关闭弹出框\r\n          that.visible = false\r\n          that.$emit('ok')\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        that.$notification.error({\r\n          message: '更新',\r\n          description: err.message\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}