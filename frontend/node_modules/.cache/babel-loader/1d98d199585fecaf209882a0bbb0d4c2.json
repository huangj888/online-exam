{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\test\\BootStrapTableDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\test\\BootStrapTableDemo.vue","mtime":1683548887965},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../plugins/bootstrap-table\";\nimport $ from 'jquery';\nexport default {\n  data: function data() {\n    var that = this; // 方便在bootstrap-table中引用methods\n    return {\n      columns: [{\n        field: 'state',\n        checkbox: true\n      }, {\n        title: 'Item ID',\n        field: 'id'\n      }, {\n        field: 'name',\n        title: 'Item Name'\n      }, {\n        field: 'price',\n        title: 'Item Price'\n      }, {\n        field: 'actions',\n        title: 'Actions',\n        align: 'center',\n        formatter: function formatter(value, row) {\n          return '<button type=\"button\" class=\"btn btn-success mybtn\">Success</button>';\n        },\n        events: {\n          'click .mybtn': function clickMybtn(e, value, row, index) {\n            // 双击是dblclick\n            that.clickRow(row, value, index);\n          }\n        }\n      }],\n      data: {\n        total: 5,\n        rows: [{\n          id: 1,\n          name: 'Item 1',\n          price: '$1'\n        }, {\n          id: 2,\n          name: 'Item 2',\n          price: '$2'\n        }, {\n          id: 3,\n          name: 'Item 3',\n          price: '$3'\n        }, {\n          id: 4,\n          name: 'Item 4',\n          price: '$4'\n        }, {\n          id: 5,\n          name: 'Item 5',\n          price: '$5'\n        }]\n      },\n      options: {\n        search: true,\n        showColumns: true,\n        showExport: true,\n        showRefresh: true,\n        // 下面两行是支持高级搜索，即按照字段搜索\n        advancedSearch: true,\n        idTable: 'advancedTable',\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\n        // onClickRow: that.clickRow,\n        // onClickCell: that.clickCell, // 单元格单击事件\n        onDblClickCell: that.dblClickCell // 单元格双击事件\n      }\n    };\n  },\n\n  methods: {\n    clickRow: function clickRow(row, value, index) {\n      alert(JSON.stringify(row) + ', ' + index);\n    },\n    clickCell: function clickCell(field, value, row, $element) {\n      alert(JSON.stringify(field));\n    },\n    /**\r\n     * 单元格双击事件\r\n     * @param field 字段名，如id、name、price等\r\n     * @param value 字段值 如Item 1、$1等\r\n     * @param row 一行的值，如{\"id\":3,\"name\":\"Item 3\",\"price\":\"$3\"}\r\n     * @param $element 行所在的dom元素，可以动态往里面加入页面元素，比如双击可编辑或者弹出富文本框等\r\n     */\n    dblClickCell: function dblClickCell(field, value, row, $element) {\n      console.log($element.text()); // 获取元素的值\n      console.log($element.html()); // 获取页面元素的值\n      var p = $('<p>弹框出现前修改内容</p>');\n      $element.append(p);\n      console.log($element.text()); // 获取元素的值\n      row[field] = $element.text(); // 更新行的值\n      alert(field + ':' + row + ', ' + JSON.stringify(row));\n      var index = $element.parent().attr('data-index'); // 获取当前行的数据的id，方便更新data中的rows数组\n      row[field] = '弹框出现后修改内容';\n      this.data.rows[index] = row;\n      this.$refs.table._initTable(); // 直接看源码找出这么个重新渲染表格的事件\n    }\n  }\n};",{"version":3,"names":["$","data","that","columns","field","checkbox","title","align","formatter","value","row","events","clickMybtn","e","index","clickRow","total","rows","id","name","price","options","search","showColumns","showExport","showRefresh","advancedSearch","idTable","onDblClickCell","dblClickCell","methods","alert","JSON","stringify","clickCell","$element","console","log","text","html","p","append","parent","attr","$refs","table","_initTable"],"sources":["src/views/test/BootStrapTableDemo.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <BootstrapTable\r\n      ref=\"table\"\r\n      :columns=\"columns\"\r\n      :data=\"data\"\r\n      :options=\"options\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '../../plugins/bootstrap-table'\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n  data () {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      columns: [\r\n        {\r\n          field: 'state',\r\n          checkbox: true\r\n        },\r\n        {\r\n          title: 'Item ID',\r\n          field: 'id'\r\n        },\r\n        {\r\n          field: 'name',\r\n          title: 'Item Name'\r\n        },\r\n        {\r\n          field: 'price',\r\n          title: 'Item Price'\r\n        },\r\n        {\r\n          field: 'actions',\r\n          title: 'Actions',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return '<button type=\"button\" class=\"btn btn-success mybtn\">Success</button>'\r\n          },\r\n          events: {\r\n            'click .mybtn': function (e, value, row, index) { // 双击是dblclick\r\n              that.clickRow(row, value, index)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      data: {\r\n        total: 5,\r\n        rows: [\r\n          {\r\n            id: 1,\r\n            name: 'Item 1',\r\n            price: '$1'\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Item 2',\r\n            price: '$2'\r\n          },\r\n          {\r\n            id: 3,\r\n            name: 'Item 3',\r\n            price: '$3'\r\n          },\r\n          {\r\n            id: 4,\r\n            name: 'Item 4',\r\n            price: '$4'\r\n          },\r\n          {\r\n            id: 5,\r\n            name: 'Item 5',\r\n            price: '$5'\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        showRefresh: true,\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell, // 单元格单击事件\r\n        onDblClickCell: that.dblClickCell // 单元格双击事件\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    clickRow (row, value, index) {\r\n      alert(JSON.stringify(row) + ', ' + index)\r\n    },\r\n    clickCell (field, value, row, $element) {\r\n      alert(JSON.stringify(field))\r\n    },\r\n    /**\r\n     * 单元格双击事件\r\n     * @param field 字段名，如id、name、price等\r\n     * @param value 字段值 如Item 1、$1等\r\n     * @param row 一行的值，如{\"id\":3,\"name\":\"Item 3\",\"price\":\"$3\"}\r\n     * @param $element 行所在的dom元素，可以动态往里面加入页面元素，比如双击可编辑或者弹出富文本框等\r\n     */\r\n    dblClickCell (field, value, row, $element) {\r\n      console.log($element.text()) // 获取元素的值\r\n      console.log($element.html()) // 获取页面元素的值\r\n      const p = $('<p>弹框出现前修改内容</p>')\r\n      $element.append(p)\r\n      console.log($element.text()) // 获取元素的值\r\n      row[field] = $element.text() // 更新行的值\r\n      alert(field + ':' + row + ', ' + JSON.stringify(row))\r\n      const index = $element.parent().attr('data-index') // 获取当前行的数据的id，方便更新data中的rows数组\r\n      row[field] = '弹框出现后修改内容'\r\n      this.data.rows[index] = row\r\n      this.$refs.table._initTable() // 直接看源码找出这么个重新渲染表格的事件\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"AAYA;AACA,OAAAA,CAAA;AAEA;EACAC,IAAA,WAAAA,KAAA;IACA,IAAAC,IAAA;IACA;MACAC,OAAA,GACA;QACAC,KAAA;QACAC,QAAA;MACA,GACA;QACAC,KAAA;QACAF,KAAA;MACA,GACA;QACAA,KAAA;QACAE,KAAA;MACA,GACA;QACAF,KAAA;QACAE,KAAA;MACA,GACA;QACAF,KAAA;QACAE,KAAA;QACAC,KAAA;QACAC,SAAA,WAAAA,UAAAC,KAAA,EAAAC,GAAA;UACA;QACA;QACAC,MAAA;UACA,yBAAAC,WAAAC,CAAA,EAAAJ,KAAA,EAAAC,GAAA,EAAAI,KAAA;YAAA;YACAZ,IAAA,CAAAa,QAAA,CAAAL,GAAA,EAAAD,KAAA,EAAAK,KAAA;UACA;QACA;MACA,EACA;MACAb,IAAA;QACAe,KAAA;QACAC,IAAA,GACA;UACAC,EAAA;UACAC,IAAA;UACAC,KAAA;QACA,GACA;UACAF,EAAA;UACAC,IAAA;UACAC,KAAA;QACA,GACA;UACAF,EAAA;UACAC,IAAA;UACAC,KAAA;QACA,GACA;UACAF,EAAA;UACAC,IAAA;UACAC,KAAA;QACA,GACA;UACAF,EAAA;UACAC,IAAA;UACAC,KAAA;QACA;MAEA;MACAC,OAAA;QACAC,MAAA;QACAC,WAAA;QACAC,UAAA;QACAC,WAAA;QACA;QACAC,cAAA;QACAC,OAAA;QACA;QACA;QACA;QACAC,cAAA,EAAA1B,IAAA,CAAA2B,YAAA;MACA;IACA;EACA;;EACAC,OAAA;IACAf,QAAA,WAAAA,SAAAL,GAAA,EAAAD,KAAA,EAAAK,KAAA;MACAiB,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAAvB,GAAA,WAAAI,KAAA;IACA;IACAoB,SAAA,WAAAA,UAAA9B,KAAA,EAAAK,KAAA,EAAAC,GAAA,EAAAyB,QAAA;MACAJ,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAA7B,KAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAyB,YAAA,WAAAA,aAAAzB,KAAA,EAAAK,KAAA,EAAAC,GAAA,EAAAyB,QAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,QAAA,CAAAG,IAAA;MACAF,OAAA,CAAAC,GAAA,CAAAF,QAAA,CAAAI,IAAA;MACA,IAAAC,CAAA,GAAAxC,CAAA;MACAmC,QAAA,CAAAM,MAAA,CAAAD,CAAA;MACAJ,OAAA,CAAAC,GAAA,CAAAF,QAAA,CAAAG,IAAA;MACA5B,GAAA,CAAAN,KAAA,IAAA+B,QAAA,CAAAG,IAAA;MACAP,KAAA,CAAA3B,KAAA,SAAAM,GAAA,UAAAsB,IAAA,CAAAC,SAAA,CAAAvB,GAAA;MACA,IAAAI,KAAA,GAAAqB,QAAA,CAAAO,MAAA,GAAAC,IAAA;MACAjC,GAAA,CAAAN,KAAA;MACA,KAAAH,IAAA,CAAAgB,IAAA,CAAAH,KAAA,IAAAJ,GAAA;MACA,KAAAkC,KAAA,CAAAC,KAAA,CAAAC,UAAA;IACA;EACA;AACA"}]}