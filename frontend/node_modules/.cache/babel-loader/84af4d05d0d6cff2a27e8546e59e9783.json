{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue","mtime":1683548887964},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../plugins/summernote\";\nimport $ from 'jquery';\nimport { getQuestionSelection, questionCreate } from \"../../../api/exam\";\nvar stepForms = [[], ['type', 'category', 'level'], ['option']];\nexport default {\n  name: 'StepByStepQuestionModal',\n  data: function data() {\n    return {\n      labelCol: {\n        xs: {\n          span: 2\n        },\n        sm: {\n          span: 2\n        }\n      },\n      size: 'default',\n      wrapperCol: {\n        xs: {\n          span: 22\n        },\n        sm: {\n          span: 22\n        }\n      },\n      // 单选和判断题的答案\n      answerOption: '',\n      // 多选题的答案\n      answerOptions: [],\n      visible: false,\n      confirmLoading: false,\n      currentStep: 0,\n      mdl: {},\n      form: this.$form.createForm(this),\n      categories: [],\n      levels: [],\n      types: [],\n      optionToAdd: '添加',\n      options: [],\n      judgeOptions: [{\n        answer: false,\n        content: '正确'\n      }, {\n        answer: false,\n        content: '错误'\n      }],\n      type: ''\n    };\n  },\n  updated: function updated() {\n    this.initSummernote('summernote-question-name');\n    this.initSummernote('summernote-question-desc');\n  },\n  methods: {\n    initSummernote: function initSummernote(divId) {\n      console.log('初始化富文本插件：' + divId);\n      $('#' + divId).summernote({\n        lang: 'zh-CN',\n        placeholder: '请输入内容',\n        height: 150,\n        width: '100%',\n        htmlMode: true,\n        toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['fontsize', ['fontsize']], ['fontname', ['fontname']], ['para', ['ul', 'ol', 'paragraph']]],\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n        fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],\n        callbacks: {\n          onSubmit: function onSubmit() {\n            this.richContent = $('#summernote').summernote('code');\n          }\n        }\n      });\n    },\n    getSummernoteContent: function getSummernoteContent(divId) {\n      return $('#' + divId).summernote('code');\n    },\n    create: function create() {\n      var _this = this;\n      this.visible = true;\n      // const { form: { setFieldsValue } } = this\n      // this.$nextTick(() => {\n      //   setFieldsValue(pick(record, []))\n      // })\n      // 把data中的question属性提交到后端，待写完后端接口\n      getQuestionSelection().then(function (res) {\n        console.log(res);\n        if (res.code === 0) {\n          console.log(res.data);\n          _this.categories = res.data.categories;\n          _this.levels = res.data.levels;\n          _this.types = res.data.types;\n        } else {\n          _this.$notification.error({\n            message: '获取问题下拉选项失败',\n            description: res.msg\n          });\n        }\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        _this.$notification.error({\n          message: '获取问题下拉选项失败',\n          description: err.message\n        });\n      });\n    },\n    popupScroll: function popupScroll() {\n      console.log('popupScroll');\n    },\n    handleNext: function handleNext(step) {\n      var _this2 = this;\n      // 处理下一步或者完成事件\n      var validateFields = this.form.validateFields;\n      var currentStep = step + 1;\n      if (currentStep <= 2) {\n        // stepForms\n        validateFields(stepForms[this.currentStep], function (errors, values) {\n          if (!errors) {\n            _this2.currentStep = currentStep;\n            // 设置题目类型(单选1、多选2或判断3)，用于最后一步问题选项的展示\n            _this2.type = values.type;\n            // 清空必要的数据\n            _this2.answerOptions = [];\n            _this2.answerOption = '';\n            if (_this2.type === 3) {\n              // 如果是判断题的话，把选项直接改成正确和错误两种\n              _this2.options = _this2.judgeOptions;\n            } else {\n              // 不是判断题那么每次要保证清空\n              _this2.options = [];\n            }\n          }\n        });\n        return;\n      }\n      // last step，最后一步，代表完成题目编写，需要点击\"完成\"创建题目\n      this.confirmLoading = true;\n      validateFields(function (errors, values) {\n        // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\n        console.log('提交数据到后端');\n        console.log('errors:', errors, 'val:', values);\n        values.options = _this2.options;\n        values.name = _this2.getSummernoteContent('summernote-question-name');\n        values.desc = _this2.getSummernoteContent('summernote-question-desc');\n        _this2.confirmLoading = false;\n        if (!errors) {\n          console.log('values:', values);\n          // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\n          questionCreate(values).then(function (res) {\n            // 成功就跳转到结果页面\n            console.log(res);\n            if (res.code === 0) {\n              _this2.$notification.success({\n                message: '创建成功',\n                description: '问题创建成功'\n              });\n              // 关闭弹出框\n              _this2.visible = false;\n              _this2.$emit('ok');\n            }\n          }).catch(function (err) {\n            // 失败就弹出警告消息\n            _this2.$notification.error({\n              message: '更新',\n              description: err.message\n            });\n          });\n        } else {\n          _this2.confirmLoading = false;\n        }\n      });\n    },\n    backward: function backward() {\n      this.currentStep--;\n    },\n    handleCancel: function handleCancel() {\n      // clear form & currentStep\n      this.visible = false;\n      this.currentStep = 0;\n    },\n    addOption: function addOption() {\n      var _this3 = this;\n      console.log('添加选项');\n      // 这里需要把选项+是否是题目答案作为一个整体添加到options中\n      var validateFields = this.form.validateFields;\n      validateFields(function (errors, values) {\n        // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\n        console.log('errors:', errors, 'val:', values);\n        for (var i = 0; i < _this3.options.length; i++) {\n          var option = _this3.options[i];\n          if (option.content === values.option) {\n            _this3.$notification.error({\n              message: '错误',\n              description: '不要添加重复选项！'\n            });\n            return;\n          }\n        }\n        var optionObj = {\n          content: values.option,\n          answer: false\n        };\n        _this3.options.push(optionObj);\n        _this3.$notification.success({\n          message: '创建选项成功',\n          description: '请到\\'设置答案\\'下拉框去查看！'\n        });\n      });\n    },\n    // 单选问题改变选项\n    handleSingleChange: function handleSingleChange(value) {\n      // 单选题的处理情况\n      for (var i = 0; i < this.options.length; i++) {\n        if (this.options[i].content === value) {\n          // 更新唯一的正确答案\n          this.options[i].answer = true;\n          // 设置答案的内容\n          this.answerOption = this.options[i].content;\n        } else {\n          // id不和答案相同地就设置为false，这样可以保证只有一个正确答案\n          this.options[i].answer = false;\n        }\n      }\n      // 单选题的处理情况\n      console.log(\"Selected: \".concat(value));\n    },\n    // 多选问题改变选项\n    handleMultiChange: function handleMultiChange(values) {\n      console.log(values);\n      // 直接更新选项id的数组\n      this.answerOptions = values;\n      // 更新question中options的answer位置\n      for (var i = 0; i < this.options.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var content = this.options[i].content;\n        var isAnswer = false;\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n          if (content === value) {\n            // 说明这个选项是答案，设置为是答案，直接退出\n            isAnswer = true;\n            this.options[i].answer = true;\n            break; // 跳出内部的for循环\n          }\n        }\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n        if (isAnswer === false) {\n          this.options[i].answer = false;\n        }\n      }\n    }\n  }\n};",null]}