{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamDetail.vue","mtime":1683548887961},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam } from \"../../api/exam\";\nimport UserMenu from \"../../components/tools/UserMenu\";\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.answersMap = new Map();\n    var that = this;\n    // 从后端获取考试的详细信息，渲染到考试详情里\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        that.examDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n  },\n  methods: _objectSpread(_objectSpread({}, mapGetters(['nickname', 'avatar'])), {}, {\n    getQuestionDetail: function getQuestionDetail(questionId) {\n      var _this2 = this;\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this;\n      // 清空问题绑定的值\n      this.radioValue = '';\n      this.checkValues = [];\n      _getQuestionDetail(questionId).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data;\n          // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value);\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = Object.create(null);\n      var _iterator = _createForOfIteratorHelper(strMap),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            k = _step$value[0],\n            v = _step$value[1];\n          obj[k] = v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return obj;\n    },\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return JSON.stringify(this._strMapToObj(map));\n    },\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this3 = this;\n      // Todo:向后端提交作答信息数组answersMap\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          // 考试交卷，后端判分完成，然后跳转到我的考试界面\n          _this3.$notification.success({\n            message: '考卷提交成功！'\n          });\n          _this3.$router.push('/list/exam-record-list');\n          return res.data;\n        } else {\n          _this3.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    }\n  })\n};",{"version":3,"names":["getExamDetail","getQuestionDetail","finishExam","UserMenu","mapGetters","name","components","data","examDetail","answersMap","currentQuestion","radioValue","checkValues","optionStyle","display","height","lineHeight","marginLeft","mounted","_this","Map","that","$route","params","id","then","res","code","$notification","error","message","description","msg","methods","_objectSpread","questionId","_this2","get","type","Object","assign","onRadioChange","e","userOptions","push","target","value","set","onCheckChange","checkedValues","_strMapToObj","strMap","obj","create","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","k","v","err","f","_mapToJson","map","JSON","stringify","_this3","success","$router"],"sources":["src/views/list/ExamDetail.vue"],"sourcesContent":["<template>\r\n  <a-layout>\r\n    <a-layout-header class=\"header\" style=\"color: #fff\">\r\n      <!--   v-if=\"examDetail.exam\" 是为了防止 异步请求时页面渲染的时候还没有拿到这个值而报错， 下面多处这个判断都是这个道理 -->\r\n      <span style=\"font-size:25px;margin-left: 0px;\" v-if=\"examDetail.exam\">\r\n        <a-avatar slot=\"avatar\" size=\"large\" shape=\"circle\" :src=\"examDetail.exam.examAvatar | imgSrcFilter\"/>\r\n        {{ examDetail.exam.examName }}\r\n        <span style=\"font-size:15px;\">{{ examDetail.exam.examDescription }} </span>\r\n      </span>\r\n      <span style=\"float: right;\">\r\n        <span style=\"margin-right: 60px; font-size: 20px\" v-if=\"examDetail.exam\">考试限时：{{ examDetail.exam.examTimeLimit }}分钟 这里是倒计时</span>\r\n        <a-button type=\"danger\" ghost style=\"margin-right: 60px;\" @click=\"finishExam()\">交卷</a-button>\r\n        <a-avatar class=\"avatar\" size=\"small\" :src=\"avatar()\"/>\r\n        <span style=\"margin-left: 12px\">{{ nickname() }}</span>\r\n      </span>\r\n    </a-layout-header>\r\n    <a-layout>\r\n      <a-layout-sider width=\"190\" :style=\"{background: '#444',overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }\">\r\n        <a-menu\r\n          mode=\"inline\"\r\n          :defaultSelectedKeys=\"['1']\"\r\n          :defaultOpenKeys=\"['question_radio', 'question_check', 'question_judge']\"\r\n          :style=\"{ height: '100%', borderRight: 0 }\"\r\n        >\r\n          <a-sub-menu key=\"question_radio\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-circle\" theme=\"twoTone\"/>单选题(每题{{ examDetail.exam.examScoreRadio }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.radioIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_check\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-square\" theme=\"twoTone\"/>多选题(每题{{ examDetail.exam.examScoreCheck }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.checkIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_judge\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"like\" theme=\"twoTone\"/>判断题(每题{{ examDetail.exam.examScoreJudge }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.judgeIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n        </a-menu>\r\n      </a-layout-sider>\r\n      <a-layout :style=\"{ marginLeft: '200px' }\">\r\n        <a-layout-content :style=\"{ margin: '24px 16px 0',height: '84vh', overflow: 'initial' }\">\r\n          <div :style=\"{ padding: '24px', background: '#fff',height: '84vh'}\">\r\n            <span v-show=\"currentQuestion === ''\" style=\"font-size: 30px;font-family: Consolas\">欢迎参加考试，请点击左侧题目编号开始答题</span>\r\n            <strong>{{ currentQuestion.type }} </strong> <p v-html=\"currentQuestion.name\"></p>\r\n            <!-- 单选题和判断题 --> <!-- key不重复只需要在一个for循环中保证即可 -->\r\n            <a-radio-group @change=\"onRadioChange\" v-model=\"radioValue\" v-if=\"currentQuestion.type === '单选题' || currentQuestion.type === '判断题'\">\r\n              <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-radio>\r\n            </a-radio-group>\r\n\r\n            <!-- 多选题 -->\r\n            <a-checkbox-group @change=\"onCheckChange\" v-model=\"checkValues\" v-if=\"currentQuestion.type === '多选题'\">\r\n              <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-checkbox>\r\n            </a-checkbox-group>\r\n          </div>\r\n        </a-layout-content>\r\n        <a-layout-footer :style=\"{ textAlign: 'center' }\">\r\n          Spting Boot Online Exam ©2020 Crated by Liang Shan Guang\r\n        </a-layout-footer>\r\n      </a-layout>\r\n    </a-layout>\r\n  </a-layout>\r\n</template>\r\n\r\n<script>\r\nimport { getExamDetail, getQuestionDetail, finishExam } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ExamDetail',\r\n  components: {\r\n    UserMenu\r\n  },\r\n  data () {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px'\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.answersMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里\r\n    getExamDetail(this.$route.params.id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          // 赋值考试对象\r\n          that.examDetail = res.data\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n  },\r\n  methods: {\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    getQuestionDetail (questionId) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.checkValues = []\r\n      getQuestionDetail(questionId)\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 赋值当前考试对象\r\n            that.currentQuestion = res.data\r\n            // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n            if (that.answersMap.get(that.currentQuestion.id)) {\r\n              // 说明之前做过这道题了\r\n              if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n                that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n              } else if (that.currentQuestion.type === '多选题') {\r\n                // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n                Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n              }\r\n            }\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '获取问题详情失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    },\r\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\r\n    onRadioChange (e) {\r\n      const userOptions = []\r\n      userOptions.push(e.target.value)\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, userOptions)\r\n    },\r\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\r\n    onCheckChange (checkedValues) {\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, checkedValues)\r\n    },\r\n    _strMapToObj (strMap) {\r\n      const obj = Object.create(null)\r\n      for (const [k, v] of strMap) {\r\n        obj[k] = v\r\n      }\r\n      return obj\r\n    },\r\n    /**\r\n     *map转换为json\r\n     */\r\n    _mapToJson (map) {\r\n      return JSON.stringify(this._strMapToObj(map))\r\n    },\r\n    /**\r\n     * 结束考试并交卷\r\n     */\r\n    finishExam () {\r\n      // Todo:向后端提交作答信息数组answersMap\r\n      finishExam(this.$route.params.id, this._mapToJson(this.answersMap))\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 考试交卷，后端判分完成，然后跳转到我的考试界面\r\n            this.$notification.success({\r\n              message: '考卷提交成功！'\r\n            })\r\n            this.$router.push('/list/exam-record-list')\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '交卷失败！',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"}]}