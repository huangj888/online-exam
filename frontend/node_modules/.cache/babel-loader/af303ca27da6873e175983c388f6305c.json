{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\user\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\user\\Login.vue","mtime":1683548887965},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport TwoStepCaptcha from \"../../components/tools/TwoStepCaptcha\";\nimport { mapActions } from 'vuex';\nimport { timeFix } from \"../../utils/util\";\nimport { getSmsCaptcha, get2step } from \"../../api/login\";\nexport default {\n  components: {\n    TwoStepCaptcha: TwoStepCaptcha\n  },\n  data: function data() {\n    return {\n      customActiveKey: 'tab1',\n      loginBtn: false,\n      // login type: 0 email, 1 username, 2 telephone\n      loginType: 0,\n      requiredTwoStepCaptcha: false,\n      stepCaptchaVisible: false,\n      form: this.$form.createForm(this),\n      state: {\n        time: 60,\n        loginBtn: false,\n        // login type: 0 email, 1 username, 2 telephone\n        loginType: 0,\n        smsSendBtn: false\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n    get2step({}).then(function (res) {\n      _this.requiredTwoStepCaptcha = res.result.stepCode;\n    }).catch(function () {\n      _this.requiredTwoStepCaptcha = false;\n    });\n    // this.requiredTwoStepCaptcha = true\n  },\n\n  methods: _objectSpread(_objectSpread({}, mapActions(['Login', 'Logout'])), {}, {\n    // 这个是从Vuex中直接继承过来，从而可以当本地方法用，见store/modules/user.js\n    // handler\n    handleUsernameOrEmail: function handleUsernameOrEmail(rule, value, callback) {\n      var state = this.state;\n      var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n      if (regex.test(value)) {\n        state.loginType = 0;\n      } else {\n        state.loginType = 1;\n      }\n      callback();\n    },\n    handleTabClick: function handleTabClick(key) {\n      this.customActiveKey = key;\n      // this.form.resetFields()\n    },\n    handleSubmit: function handleSubmit(e) {\n      var _this2 = this;\n      e.preventDefault();\n      var validateFields = this.form.validateFields,\n        state = this.state,\n        customActiveKey = this.customActiveKey,\n        Login = this.Login;\n      state.loginBtn = true;\n      var validateFieldsKey = customActiveKey === 'tab1' ? ['username', 'password'] : ['mobile', 'captcha'];\n      validateFields(validateFieldsKey, {\n        force: true\n      }, function (err, values) {\n        console.log(values); // 打印用户的登录参数\n        if (!err) {\n          var loginParams = {}; // 声明登录的参数\n          // delete loginParams.username\n          // loginParams[!state.loginType ? 'email' : 'username'] = values.username\n          loginParams.loginType = state.loginType; // 登录类型，0 email, 1 username\n          loginParams.userInfo = values.username; // 设置用户信息，因为email还是username不确定，所以用userinfo字段来代替\n          loginParams.password = values.password; // 用户的密码，无加密\n          console.log(loginParams);\n          Login(loginParams) // 请求登录接口\n          .then(function (res) {\n            return _this2.loginSuccess(res);\n          }) // 成功\n          .catch(function (err) {\n            return _this2.requestFailed(err);\n          }) // 失败\n          .finally(function () {\n            state.loginBtn = false; // 不管登录成功与否，都要把按钮置灰，防止用户重复点击\n          });\n        } else {\n          setTimeout(function () {\n            state.loginBtn = false;\n          }, 600);\n        }\n      });\n    },\n    getCaptcha: function getCaptcha(e) {\n      var _this3 = this;\n      e.preventDefault();\n      var validateFields = this.form.validateFields,\n        state = this.state;\n      validateFields(['mobile'], {\n        force: true\n      }, function (err, values) {\n        if (!err) {\n          state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (state.time-- <= 0) {\n              state.time = 60;\n              state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n          var hide = _this3.$message.loading('验证码发送中..', 0);\n          getSmsCaptcha({\n            mobile: values.mobile\n          }).then(function (res) {\n            setTimeout(hide, 2500);\n            _this3.$notification['success']({\n              message: '提示',\n              description: '验证码获取成功，您的验证码为：' + res.result.captcha,\n              duration: 8\n            });\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            state.time = 60;\n            state.smsSendBtn = false;\n            _this3.requestFailed(err);\n          });\n        }\n      });\n    },\n    stepCaptchaSuccess: function stepCaptchaSuccess() {\n      this.loginSuccess();\n    },\n    stepCaptchaCancel: function stepCaptchaCancel() {\n      var _this4 = this;\n      this.Logout().then(function () {\n        _this4.loginBtn = false;\n        _this4.stepCaptchaVisible = false;\n      });\n    },\n    loginSuccess: function loginSuccess(res) {\n      var _this5 = this;\n      console.log(res);\n      this.$router.push({\n        name: 'dashboard'\n      });\n      // 延迟 1 秒显示欢迎信息\n      setTimeout(function () {\n        _this5.$notification.success({\n          message: '欢迎',\n          description: \"\".concat(timeFix(), \"\\uFF0C\\u6B22\\u8FCE\\u56DE\\u6765\")\n        });\n      }, 1000);\n    },\n    requestFailed: function requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || '用户名或密码错误',\n        duration: 4\n      });\n    }\n  })\n};",null]}