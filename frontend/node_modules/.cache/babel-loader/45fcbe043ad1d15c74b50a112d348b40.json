{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\ExamEditModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\ExamEditModal.vue","mtime":1683548887963},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { getExamQuestionTypeList, examUpdate } from \"../../../api/exam\";\nvar stepForms = [['name', 'elapse', 'desc', 'avatar'], ['radioScore', 'checkScore', 'judgeScore'], ['option']];\nexport default {\n  name: 'ExamEditModal',\n  data: function data() {\n    return {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 7\n        }\n      },\n      size: 'default',\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 13\n        }\n      },\n      visible: false,\n      confirmLoading: false,\n      currentStep: 0,\n      mdl: {},\n      form: this.$form.createForm(this),\n      // 考试的对象\n      exam: {},\n      name: '',\n      elapse: 0,\n      desc: '',\n      avatar: '',\n      radioScore: 0,\n      checkScore: 0,\n      judgeScore: 0,\n      radios: [],\n      checks: [],\n      judges: [],\n      defaultRadios: [],\n      defaultChecks: [],\n      defaultJudges: []\n    };\n  },\n  methods: {\n    edit: function edit(exam) {\n      var _this = this;\n      Object.assign(this.exam, exam); // 深度拷贝\n      this.visible = true;\n      // 每次编辑需要先清空下之前的数据\n      this.radios = [];\n      this.checks = [];\n      this.judges = [];\n      this.defaultRadios = [];\n      this.defaultChecks = [];\n      this.defaultJudges = [];\n      this.name = exam.name;\n      this.elapse = exam.elapse;\n      this.desc = exam.desc;\n      this.avatar = exam.avatar;\n      this.radioScore = exam.radioScore;\n      this.checkScore = exam.checkScore;\n      this.judgeScore = exam.judgeScore;\n      var that = this;\n      // 从后端数据获取单选题、多选题和判断题的列表.在编辑的时候需要在点击\"编辑的时候传入进来\"\n      getExamQuestionTypeList().then(function (res) {\n        console.log(res);\n        if (res.code !== 0) {\n          that.$notification.error({\n            message: '获取问题列表失败',\n            description: res.msg\n          });\n        }\n        console.log(res.data);\n        that.radios = res.data.radios;\n        that.checks = res.data.checks;\n        that.judges = res.data.judges;\n        // 从exam里面的radios、checks、judges设置下上面的this里面的三个属性，把checked属性设置为true\n        for (var i = 0; i < exam.radios.length; i++) {\n          // 遍历所有的题目的选项\n          that.defaultRadios.push(exam.radios[i].name);\n        }\n        that.handleRadioChange(that.defaultRadios);\n        for (var _i2 = 0; _i2 < exam.checks.length; _i2++) {\n          // 遍历所有的题目的选项\n          that.defaultChecks.push(exam.checks[_i2].name);\n        }\n        that.handleCheckChange(that.defaultChecks);\n        for (var _i4 = 0; _i4 < exam.judges.length; _i4++) {\n          // 遍历所有的题目的选项\n          that.defaultJudges.push(exam.judges[_i4].name);\n        }\n        that.handleJudgeChange(that.defaultJudges);\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        _this.$notification.error({\n          message: '获取问题列表失败',\n          description: err.message\n        });\n      });\n    },\n    popupScroll: function popupScroll() {\n      console.log('popupScroll');\n    },\n    handleNext: function handleNext(step) {\n      var _this2 = this;\n      // 处理下一步或者完成事件\n      var validateFields = this.form.validateFields;\n      var currentStep = step + 1;\n      if (currentStep <= 2) {\n        // stepForms\n        validateFields(stepForms[this.currentStep], function (errors, values) {\n          if (!errors) {\n            _this2.currentStep = currentStep;\n          }\n        });\n        return;\n      }\n      // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\n      this.confirmLoading = true;\n      console.log('提交数据到后端');\n      this.confirmLoading = false;\n      this.exam.name = this.name;\n      this.exam.elapse = this.elapse;\n      this.exam.desc = this.desc;\n      this.exam.avatar = this.avatar;\n      this.exam.radioScore = this.radioScore;\n      this.exam.checkScore = this.checkScore;\n      this.exam.judgeScore = this.judgeScore;\n      // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\n      this.exam.radios = this.radios;\n      this.exam.checks = this.checks;\n      this.exam.judges = this.judges;\n      var that = this;\n      examUpdate(that.exam).then(function (res) {\n        // 成功就跳转到结果页面\n        console.log(res);\n        if (res.code === 0) {\n          that.$notification.success({\n            message: '更新成功',\n            description: '考试更新成功'\n          });\n          // 关闭弹出框\n          that.visible = false;\n          that.currentStep = 0;\n          that.$emit('ok');\n        }\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        that.$notification.error({\n          message: '考试更新失败',\n          description: err.message\n        });\n      });\n    },\n    backward: function backward() {\n      this.currentStep--;\n    },\n    handleCancel: function handleCancel() {\n      // clear form & currentStep\n      this.visible = false;\n      this.currentStep = 0;\n    },\n    // 改变选择的题目列表,这里需要分单选、多选和判断进行单独更新，下面的代码要针对radios、checks和judges分别适配\n    handleRadioChange: function handleRadioChange(values) {\n      console.log(values);\n      // 更新单选题的信息\n      for (var i = 0; i < this.radios.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.radios[i].name;\n        // 当前问题是否被问题创建者选中\n        var checked = false;\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.radios[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        }\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n        if (checked === false) {\n          this.radios[i].checked = false;\n        }\n      }\n    },\n    // 更新多选题信息\n    handleCheckChange: function handleCheckChange(values) {\n      console.log(values);\n      // 更新多选题的信息\n      for (var i = 0; i < this.checks.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.checks[i].name;\n        // 当前问题是否被问题创建者选中\n        var checked = false;\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.checks[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        }\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n        if (checked === false) {\n          this.checks[i].checked = false;\n        }\n      }\n    },\n    // 更新判断题信息\n    handleJudgeChange: function handleJudgeChange(values) {\n      console.log(values);\n      // 更新判断题的信息\n      for (var i = 0; i < this.judges.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.judges[i].name;\n        // 当前问题是否被问题创建者选中\n        var checked = false;\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.judges[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        }\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n        if (checked === false) {\n          this.judges[i].checked = false;\n        }\n      }\n    }\n  }\n};",null]}