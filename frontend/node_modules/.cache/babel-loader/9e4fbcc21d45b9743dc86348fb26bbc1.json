{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\modules\\StepByStepQuestionModal.vue","mtime":1683548887964},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../plugins/summernote\";\nimport $ from 'jquery';\nimport { getQuestionSelection, questionCreate } from \"../../../api/exam\";\nvar stepForms = [[], ['type', 'category', 'level'], ['option']];\nexport default {\n  name: 'StepByStepQuestionModal',\n  data: function data() {\n    return {\n      labelCol: {\n        xs: {\n          span: 2\n        },\n        sm: {\n          span: 2\n        }\n      },\n      size: 'default',\n      wrapperCol: {\n        xs: {\n          span: 22\n        },\n        sm: {\n          span: 22\n        }\n      },\n      // 单选和判断题的答案\n      answerOption: '',\n      // 多选题的答案\n      answerOptions: [],\n      visible: false,\n      confirmLoading: false,\n      currentStep: 0,\n      mdl: {},\n      form: this.$form.createForm(this),\n      categories: [],\n      levels: [],\n      types: [],\n      optionToAdd: '添加',\n      options: [],\n      judgeOptions: [{\n        answer: false,\n        content: '正确'\n      }, {\n        answer: false,\n        content: '错误'\n      }],\n      type: ''\n    };\n  },\n  updated: function updated() {\n    this.initSummernote('summernote-question-name');\n    this.initSummernote('summernote-question-desc');\n  },\n  methods: {\n    initSummernote: function initSummernote(divId) {\n      console.log('初始化富文本插件：' + divId);\n      $('#' + divId).summernote({\n        lang: 'zh-CN',\n        placeholder: '请输入内容',\n        height: 150,\n        width: '100%',\n        htmlMode: true,\n        toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['fontsize', ['fontsize']], ['fontname', ['fontname']], ['para', ['ul', 'ol', 'paragraph']]],\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n        fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],\n        callbacks: {\n          onSubmit: function onSubmit() {\n            this.richContent = $('#summernote').summernote('code');\n          }\n        }\n      });\n    },\n    getSummernoteContent: function getSummernoteContent(divId) {\n      return $('#' + divId).summernote('code');\n    },\n    create: function create() {\n      var _this = this;\n      this.visible = true;\n      // const { form: { setFieldsValue } } = this\n      // this.$nextTick(() => {\n      //   setFieldsValue(pick(record, []))\n      // })\n      // 把data中的question属性提交到后端，待写完后端接口\n      getQuestionSelection().then(function (res) {\n        console.log(res);\n        if (res.code === 0) {\n          console.log(res.data);\n          _this.categories = res.data.categories;\n          _this.levels = res.data.levels;\n          _this.types = res.data.types;\n        } else {\n          _this.$notification.error({\n            message: '获取问题下拉选项失败',\n            description: res.msg\n          });\n        }\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        _this.$notification.error({\n          message: '获取问题下拉选项失败',\n          description: err.message\n        });\n      });\n    },\n    popupScroll: function popupScroll() {\n      console.log('popupScroll');\n    },\n    handleNext: function handleNext(step) {\n      var _this2 = this;\n      // 处理下一步或者完成事件\n      var validateFields = this.form.validateFields;\n      var currentStep = step + 1;\n      if (currentStep <= 2) {\n        // stepForms\n        validateFields(stepForms[this.currentStep], function (errors, values) {\n          if (!errors) {\n            _this2.currentStep = currentStep;\n            // 设置题目类型(单选1、多选2或判断3)，用于最后一步问题选项的展示\n            _this2.type = values.type;\n            // 清空必要的数据\n            _this2.answerOptions = [];\n            _this2.answerOption = '';\n            if (_this2.type === 3) {\n              // 如果是判断题的话，把选项直接改成正确和错误两种\n              _this2.options = _this2.judgeOptions;\n            } else {\n              // 不是判断题那么每次要保证清空\n              _this2.options = [];\n            }\n          }\n        });\n        return;\n      }\n      // last step，最后一步，代表完成题目编写，需要点击\"完成\"创建题目\n      this.confirmLoading = true;\n      validateFields(function (errors, values) {\n        // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\n        console.log('提交数据到后端');\n        console.log('errors:', errors, 'val:', values);\n        values.options = _this2.options;\n        values.name = _this2.getSummernoteContent('summernote-question-name');\n        values.desc = _this2.getSummernoteContent('summernote-question-desc');\n        _this2.confirmLoading = false;\n        if (!errors) {\n          console.log('values:', values);\n          // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\n          questionCreate(values).then(function (res) {\n            // 成功就跳转到结果页面\n            console.log(res);\n            if (res.code === 0) {\n              _this2.$notification.success({\n                message: '创建成功',\n                description: '问题创建成功'\n              });\n              // 关闭弹出框\n              _this2.visible = false;\n              _this2.$emit('ok');\n            }\n          }).catch(function (err) {\n            // 失败就弹出警告消息\n            _this2.$notification.error({\n              message: '更新',\n              description: err.message\n            });\n          });\n        } else {\n          _this2.confirmLoading = false;\n        }\n      });\n    },\n    backward: function backward() {\n      this.currentStep--;\n    },\n    handleCancel: function handleCancel() {\n      // clear form & currentStep\n      this.visible = false;\n      this.currentStep = 0;\n    },\n    addOption: function addOption() {\n      var _this3 = this;\n      console.log('添加选项');\n      // 这里需要把选项+是否是题目答案作为一个整体添加到options中\n      var validateFields = this.form.validateFields;\n      validateFields(function (errors, values) {\n        // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\n        console.log('errors:', errors, 'val:', values);\n        for (var i = 0; i < _this3.options.length; i++) {\n          var option = _this3.options[i];\n          if (option.content === values.option) {\n            _this3.$notification.error({\n              message: '错误',\n              description: '不要添加重复选项！'\n            });\n            return;\n          }\n        }\n        var optionObj = {\n          content: values.option,\n          answer: false\n        };\n        _this3.options.push(optionObj);\n        _this3.$notification.success({\n          message: '创建选项成功',\n          description: '请到\\'设置答案\\'下拉框去查看！'\n        });\n      });\n    },\n    // 单选问题改变选项\n    handleSingleChange: function handleSingleChange(value) {\n      // 单选题的处理情况\n      for (var i = 0; i < this.options.length; i++) {\n        if (this.options[i].content === value) {\n          // 更新唯一的正确答案\n          this.options[i].answer = true;\n          // 设置答案的内容\n          this.answerOption = this.options[i].content;\n        } else {\n          // id不和答案相同地就设置为false，这样可以保证只有一个正确答案\n          this.options[i].answer = false;\n        }\n      }\n      // 单选题的处理情况\n      console.log(\"Selected: \".concat(value));\n    },\n    // 多选问题改变选项\n    handleMultiChange: function handleMultiChange(values) {\n      console.log(values);\n      // 直接更新选项id的数组\n      this.answerOptions = values;\n      // 更新question中options的answer位置\n      for (var i = 0; i < this.options.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var content = this.options[i].content;\n        var isAnswer = false;\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n          if (content === value) {\n            // 说明这个选项是答案，设置为是答案，直接退出\n            isAnswer = true;\n            this.options[i].answer = true;\n            break; // 跳出内部的for循环\n          }\n        }\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n        if (isAnswer === false) {\n          this.options[i].answer = false;\n        }\n      }\n    }\n  }\n};",{"version":3,"names":["$","getQuestionSelection","questionCreate","stepForms","name","data","labelCol","xs","span","sm","size","wrapperCol","answerOption","answerOptions","visible","confirmLoading","currentStep","mdl","form","$form","createForm","categories","levels","types","optionToAdd","options","judgeOptions","answer","content","type","updated","initSummernote","methods","divId","console","log","summernote","lang","placeholder","height","width","htmlMode","toolbar","fontSizes","fontNames","callbacks","onSubmit","richContent","getSummernoteContent","create","_this","then","res","code","$notification","error","message","description","msg","catch","err","popupScroll","handleNext","step","_this2","validateFields","errors","values","desc","success","$emit","backward","handleCancel","addOption","_this3","i","length","option","optionObj","push","handleSingleChange","value","concat","handleMultiChange","isAnswer","j"],"sources":["src/views/list/modules/StepByStepQuestionModal.vue"],"sourcesContent":["<template>\r\n  <a-modal title=\"创建问题\" :width=\"800\" :visible=\"visible\" :confirmLoading=\"confirmLoading\" @cancel=\"handleCancel\">\r\n    <a-spin :spinning=\"confirmLoading\">\r\n      <a-steps :current=\"currentStep\" :style=\"{ marginBottom: '28px' }\" size=\"small\">\r\n        <a-step title=\"问题内容\" />\r\n        <a-step title=\"问题分类\" />\r\n        <a-step title=\"问题选项\" />\r\n      </a-steps>\r\n      <a-form :form=\"form\">\r\n        <!-- step1 -->\r\n        <div v-show=\"currentStep === 0\">\r\n          <a-form-item label=\"题干\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <div id=\"summernote-question-name\"></div>\r\n          </a-form-item>\r\n          <a-form-item label=\"解析\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <div id=\"summernote-question-desc\"></div>\r\n          </a-form-item>\r\n        </div>\r\n        <div v-show=\"currentStep === 1\">\r\n          <a-form-item label=\"题型\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-select v-decorator=\"['type', {rules: [{required: true}]}]\" placeholder=\"请选择题型\" style=\"width: 100%\">\r\n              <a-select-option v-for=\"typeObj in types\" :value=\"typeObj.id\" :key=\"typeObj.id\">\r\n                {{ typeObj.description }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"归类\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-select v-decorator=\"['category', { rules: [{required: true}]}]\" placeholder=\"请选择分类\" style=\"width: 100%\">\r\n              <a-select-option v-for=\"category in categories\" :value=\"category.id\" :key=\"category.id\">\r\n                {{ category.name }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"难度\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\r\n            <a-select v-decorator=\"['level', { rules: [{required: true}]}]\" placeholder=\"请选择难度\" style=\"width: 100%\">\r\n              <a-select-option v-for=\"level in levels\" :value=\"level.id\" :key=\"level.id\">\r\n                {{ level.description }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n        </div>\r\n\r\n        <div v-show=\"currentStep === 2\">\r\n          <!-- 非判断题的时候显示 -->\r\n          <a-form-item label=\"创建选项\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" v-if=\"type!==3\">\r\n            <a-input\r\n              v-decorator=\"['option', { rules: [{required: true}]}]\"\r\n              placeholder=\"输入内容后按Enter添加到下方选项列表\"\r\n              @pressEnter=\"addOption()\"\r\n            />\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"设置答案\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" enterButton=\"Search\">\r\n            <!-- 注意这里要按照单选、多选和判断进行区分 -->\r\n            <!-- 单选 -->\r\n            <a-select\r\n              style=\"width: 100%\"\r\n              placeholder=\"请选择单选题的答案\"\r\n              v-if=\"type===1\"\r\n              @change=\"handleSingleChange\"\r\n              :value=\"answerOption\"\r\n            >\r\n\r\n              <a-select-option v-for=\"(option,index) in options\" :value=\"option.content\" :key=\"index\">\r\n                {{ option.content }}\r\n              </a-select-option>\r\n            </a-select>\r\n            <!-- 多选 -->\r\n            <a-select\r\n              mode=\"multiple\"\r\n              :size=\"size\"\r\n              placeholder=\"请选择多选题的答案\"\r\n              :value=\"answerOptions\"\r\n              v-if=\"type===2\"\r\n              style=\"width: 100%\"\r\n              @popupScroll=\"popupScroll\"\r\n              @change=\"handleMultiChange\"\r\n            >\r\n              <a-select-option v-for=\"(option, index) in options\" :value=\"option.content\" :key=\"index\">\r\n                {{ option.content }}\r\n              </a-select-option>\r\n            </a-select>\r\n            <!-- 判断，本质上和单选一样 -->\r\n            <a-select\r\n              style=\"width: 100%\"\r\n              placeholder=\"请选择判断题的答案\"\r\n              v-if=\"type===3\"\r\n              @change=\"handleSingleChange\"\r\n              :value=\"answerOption\"\r\n            >\r\n\r\n              <a-select-option v-for=\"(option,index) in options\" :value=\"option.content\" :key=\"index\">\r\n                {{ option.content }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n        </div>\r\n        <!-- step1 end -->\r\n      </a-form>\r\n    </a-spin>\r\n    <template slot=\"footer\">\r\n      <a-button key=\"back\" @click=\"backward\" v-if=\"currentStep > 0\" :style=\"{ float: 'left' }\">上一步</a-button>\r\n      <a-button key=\"cancel\" @click=\"handleCancel\">取消</a-button>\r\n      <a-button key=\"forward\" :loading=\"confirmLoading\" type=\"primary\" @click=\"handleNext(currentStep)\">\r\n        {{ currentStep === 2 && '完成' || '下一步' }}\r\n      </a-button>\r\n    </template>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\nimport '../../../plugins/summernote'\r\nimport $ from 'jquery'\r\nimport { getQuestionSelection, questionCreate } from '../../../api/exam'\r\n\r\nconst stepForms = [[], ['type', 'category', 'level'], ['option']]\r\n\r\nexport default {\r\n  name: 'StepByStepQuestionModal',\r\n  data () {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 2 },\r\n        sm: { span: 2 }\r\n      },\r\n      size: 'default',\r\n      wrapperCol: {\r\n        xs: { span: 22 },\r\n        sm: { span: 22 }\r\n      },\r\n      // 单选和判断题的答案\r\n      answerOption: '',\r\n      // 多选题的答案\r\n      answerOptions: [],\r\n      visible: false,\r\n      confirmLoading: false,\r\n      currentStep: 0,\r\n      mdl: {},\r\n\r\n      form: this.$form.createForm(this),\r\n      categories: [],\r\n      levels: [],\r\n      types: [],\r\n      optionToAdd: '添加',\r\n      options: [],\r\n      judgeOptions: [\r\n        {\r\n          answer: false,\r\n          content: '正确'\r\n        },\r\n        {\r\n          answer: false,\r\n          content: '错误'\r\n        }\r\n      ],\r\n      type: ''\r\n    }\r\n  },\r\n  updated () {\r\n    this.initSummernote('summernote-question-name')\r\n    this.initSummernote('summernote-question-desc')\r\n  },\r\n  methods: {\r\n    initSummernote (divId) {\r\n      console.log('初始化富文本插件：' + divId)\r\n      $('#' + divId).summernote({\r\n        lang: 'zh-CN',\r\n        placeholder: '请输入内容',\r\n        height: 150,\r\n        width: '100%',\r\n        htmlMode: true,\r\n        toolbar: [\r\n          ['style', ['bold', 'italic', 'underline', 'clear']],\r\n          ['fontsize', ['fontsize']],\r\n          ['fontname', ['fontname']],\r\n          ['para', ['ul', 'ol', 'paragraph']]\r\n        ],\r\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\r\n        fontNames: [\r\n          'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\r\n          'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\r\n          'Tahoma', 'Times New Roman', 'Verdana'\r\n        ],\r\n        callbacks: {\r\n          onSubmit: function () {\r\n            this.richContent = $('#summernote').summernote('code')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getSummernoteContent (divId) {\r\n      return $('#' + divId).summernote('code')\r\n    },\r\n    create () {\r\n      this.visible = true\r\n      // const { form: { setFieldsValue } } = this\r\n      // this.$nextTick(() => {\r\n      //   setFieldsValue(pick(record, []))\r\n      // })\r\n      // 把data中的question属性提交到后端，待写完后端接口\r\n      getQuestionSelection().then(res => {\r\n        console.log(res)\r\n        if (res.code === 0) {\r\n          console.log(res.data)\r\n          this.categories = res.data.categories\r\n          this.levels = res.data.levels\r\n          this.types = res.data.types\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取问题下拉选项失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      }).catch(err => {\r\n        // 失败就弹出警告消息\r\n        this.$notification.error({\r\n          message: '获取问题下拉选项失败',\r\n          description: err.message\r\n        })\r\n      })\r\n    },\r\n    popupScroll () {\r\n      console.log('popupScroll')\r\n    },\r\n    handleNext (step) {\r\n      // 处理下一步或者完成事件\r\n      const { form: { validateFields } } = this\r\n      const currentStep = step + 1\r\n      if (currentStep <= 2) {\r\n        // stepForms\r\n        validateFields(stepForms[this.currentStep], (errors, values) => {\r\n          if (!errors) {\r\n            this.currentStep = currentStep\r\n            // 设置题目类型(单选1、多选2或判断3)，用于最后一步问题选项的展示\r\n            this.type = values.type\r\n            // 清空必要的数据\r\n            this.answerOptions = []\r\n            this.answerOption = ''\r\n            if (this.type === 3) {\r\n              // 如果是判断题的话，把选项直接改成正确和错误两种\r\n              this.options = this.judgeOptions\r\n            } else {\r\n              // 不是判断题那么每次要保证清空\r\n              this.options = []\r\n            }\r\n          }\r\n        })\r\n        return\r\n      }\r\n      // last step，最后一步，代表完成题目编写，需要点击\"完成\"创建题目\r\n      this.confirmLoading = true\r\n      validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\r\n        console.log('提交数据到后端')\r\n        console.log('errors:', errors, 'val:', values)\r\n        values.options = this.options\r\n        values.name = this.getSummernoteContent('summernote-question-name')\r\n        values.desc = this.getSummernoteContent('summernote-question-desc')\r\n        this.confirmLoading = false\r\n        if (!errors) {\r\n          console.log('values:', values)\r\n          // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\r\n          questionCreate(values).then(res => {\r\n            // 成功就跳转到结果页面\r\n            console.log(res)\r\n            if (res.code === 0) {\r\n              this.$notification.success({\r\n                message: '创建成功',\r\n                description: '问题创建成功'\r\n              })\r\n              // 关闭弹出框\r\n              this.visible = false\r\n              this.$emit('ok')\r\n            }\r\n          }).catch(err => {\r\n            // 失败就弹出警告消息\r\n            this.$notification.error({\r\n              message: '更新',\r\n              description: err.message\r\n            })\r\n          })\r\n        } else {\r\n          this.confirmLoading = false\r\n        }\r\n      })\r\n    },\r\n    backward () {\r\n      this.currentStep--\r\n    },\r\n    handleCancel () {\r\n      // clear form & currentStep\r\n      this.visible = false\r\n      this.currentStep = 0\r\n    },\r\n    addOption () {\r\n      console.log('添加选项')\r\n      // 这里需要把选项+是否是题目答案作为一个整体添加到options中\r\n      const { form: { validateFields } } = this\r\n      validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\r\n        console.log('errors:', errors, 'val:', values)\r\n        for (let i = 0; i < this.options.length; i++) {\r\n          const option = this.options[i]\r\n          if (option.content === values.option) {\r\n            this.$notification.error({\r\n              message: '错误',\r\n              description: '不要添加重复选项！'\r\n            })\r\n            return\r\n          }\r\n        }\r\n        const optionObj = { content: values.option, answer: false }\r\n        this.options.push(optionObj)\r\n        this.$notification.success({\r\n          message: '创建选项成功',\r\n          description: '请到\\'设置答案\\'下拉框去查看！'\r\n        })\r\n      })\r\n    },\r\n    // 单选问题改变选项\r\n    handleSingleChange (value) {\r\n      // 单选题的处理情况\r\n      for (let i = 0; i < this.options.length; i++) {\r\n        if (this.options[i].content === value) {\r\n          // 更新唯一的正确答案\r\n          this.options[i].answer = true\r\n          // 设置答案的内容\r\n          this.answerOption = this.options[i].content\r\n        } else {\r\n          // id不和答案相同地就设置为false，这样可以保证只有一个正确答案\r\n          this.options[i].answer = false\r\n        }\r\n      }\r\n      // 单选题的处理情况\r\n      console.log(`Selected: ${value}`)\r\n    },\r\n    // 多选问题改变选项\r\n    handleMultiChange (values) {\r\n      console.log(values)\r\n      // 直接更新选项id的数组\r\n      this.answerOptions = values\r\n      // 更新question中options的answer位置\r\n      for (let i = 0; i < this.options.length; i++) { // 遍历所有的题目的选项\r\n        // 取出一个选项的id\r\n        const content = this.options[i].content\r\n        let isAnswer = false\r\n        for (let j = 0; j < values.length; j++) { // 拿着\r\n          const value = values[j]\r\n          if (content === value) {\r\n            // 说明这个选项是答案，设置为是答案，直接退出\r\n            isAnswer = true\r\n            this.options[i].answer = true\r\n            break // 跳出内部的for循环\r\n          }\r\n        }\r\n        // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\r\n        if (isAnswer === false) {\r\n          this.options[i].answer = false\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"}]}