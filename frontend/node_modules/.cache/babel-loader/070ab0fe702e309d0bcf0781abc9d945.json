{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\store\\modules\\permission.js","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\store\\modules\\permission.js","mtime":1683548887952},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { asyncRouterMap, constantRouterMap } from \"../../config/router.config\";\n\n/**\r\n * 过滤账户是否拥有某一个权限，并将菜单从加载列表移除\r\n *\r\n * @param permission\r\n * @param route\r\n * @returns {boolean}\r\n */\nfunction hasPermission(permission, route) {\n  if (route.meta && route.meta.permission) {\n    var flag = false;\n    for (var i = 0, len = permission.length; i < len; i++) {\n      flag = route.meta.permission.includes(permission[i]);\n      if (flag) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return true;\n}\n\n/**\r\n * 单账户多角色时，使用该方法可过滤角色不存在的菜单\r\n *\r\n * @param roles\r\n * @param route\r\n * @returns {*}\r\n */\n// eslint-disable-next-line\nfunction hasRole(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return route.meta.roles.includes(roles.id);\n  } else {\n    return true;\n  }\n}\nfunction filterAsyncRouter(routerMap, roles) {\n  var accessedRouters = routerMap.filter(function (route) {\n    if (hasPermission(roles.permissionList, route)) {\n      if (route.children && route.children.length) {\n        route.children = filterAsyncRouter(route.children, roles);\n      }\n      return true;\n    }\n    return false;\n  });\n  return accessedRouters;\n}\nvar permission = {\n  state: {\n    routers: constantRouterMap,\n    addRouters: []\n  },\n  mutations: {\n    SET_ROUTERS: function SET_ROUTERS(state, routers) {\n      state.addRouters = routers;\n      state.routers = constantRouterMap.concat(routers);\n    }\n  },\n  actions: {\n    GenerateRoutes: function GenerateRoutes(_ref, data) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve) {\n        var roles = data.roles;\n        var accessedRouters = filterAsyncRouter(asyncRouterMap, roles);\n        commit('SET_ROUTERS', accessedRouters);\n        resolve();\n      });\n    }\n  }\n};\nexport default permission;",null]}