{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\test\\BootStrapTableDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\test\\BootStrapTableDemo.vue","mtime":1683548887965},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../plugins/bootstrap-table\";\nimport $ from 'jquery';\nexport default {\n  data: function data() {\n    var that = this; // 方便在bootstrap-table中引用methods\n    return {\n      columns: [{\n        field: 'state',\n        checkbox: true\n      }, {\n        title: 'Item ID',\n        field: 'id'\n      }, {\n        field: 'name',\n        title: 'Item Name'\n      }, {\n        field: 'price',\n        title: 'Item Price'\n      }, {\n        field: 'actions',\n        title: 'Actions',\n        align: 'center',\n        formatter: function formatter(value, row) {\n          return '<button type=\"button\" class=\"btn btn-success mybtn\">Success</button>';\n        },\n        events: {\n          'click .mybtn': function clickMybtn(e, value, row, index) {\n            // 双击是dblclick\n            that.clickRow(row, value, index);\n          }\n        }\n      }],\n      data: {\n        total: 5,\n        rows: [{\n          id: 1,\n          name: 'Item 1',\n          price: '$1'\n        }, {\n          id: 2,\n          name: 'Item 2',\n          price: '$2'\n        }, {\n          id: 3,\n          name: 'Item 3',\n          price: '$3'\n        }, {\n          id: 4,\n          name: 'Item 4',\n          price: '$4'\n        }, {\n          id: 5,\n          name: 'Item 5',\n          price: '$5'\n        }]\n      },\n      options: {\n        search: true,\n        showColumns: true,\n        showExport: true,\n        showRefresh: true,\n        // 下面两行是支持高级搜索，即按照字段搜索\n        advancedSearch: true,\n        idTable: 'advancedTable',\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\n        // onClickRow: that.clickRow,\n        // onClickCell: that.clickCell, // 单元格单击事件\n        onDblClickCell: that.dblClickCell // 单元格双击事件\n      }\n    };\n  },\n\n  methods: {\n    clickRow: function clickRow(row, value, index) {\n      alert(JSON.stringify(row) + ', ' + index);\n    },\n    clickCell: function clickCell(field, value, row, $element) {\n      alert(JSON.stringify(field));\n    },\n    /**\r\n     * 单元格双击事件\r\n     * @param field 字段名，如id、name、price等\r\n     * @param value 字段值 如Item 1、$1等\r\n     * @param row 一行的值，如{\"id\":3,\"name\":\"Item 3\",\"price\":\"$3\"}\r\n     * @param $element 行所在的dom元素，可以动态往里面加入页面元素，比如双击可编辑或者弹出富文本框等\r\n     */\n    dblClickCell: function dblClickCell(field, value, row, $element) {\n      console.log($element.text()); // 获取元素的值\n      console.log($element.html()); // 获取页面元素的值\n      var p = $('<p>弹框出现前修改内容</p>');\n      $element.append(p);\n      console.log($element.text()); // 获取元素的值\n      row[field] = $element.text(); // 更新行的值\n      alert(field + ':' + row + ', ' + JSON.stringify(row));\n      var index = $element.parent().attr('data-index'); // 获取当前行的数据的id，方便更新data中的rows数组\n      row[field] = '弹框出现后修改内容';\n      this.data.rows[index] = row;\n      this.$refs.table._initTable(); // 直接看源码找出这么个重新渲染表格的事件\n    }\n  }\n};",null]}