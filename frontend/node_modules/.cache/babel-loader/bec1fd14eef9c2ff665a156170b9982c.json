{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\ExamDetail.vue","mtime":1683548887961},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam } from \"../../api/exam\";\nimport UserMenu from \"../../components/tools/UserMenu\";\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.answersMap = new Map();\n    var that = this;\n    // 从后端获取考试的详细信息，渲染到考试详情里\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        that.examDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n  },\n  methods: _objectSpread(_objectSpread({}, mapGetters(['nickname', 'avatar'])), {}, {\n    getQuestionDetail: function getQuestionDetail(questionId) {\n      var _this2 = this;\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this;\n      // 清空问题绑定的值\n      this.radioValue = '';\n      this.checkValues = [];\n      _getQuestionDetail(questionId).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data;\n          // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value);\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = Object.create(null);\n      var _iterator = _createForOfIteratorHelper(strMap),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            k = _step$value[0],\n            v = _step$value[1];\n          obj[k] = v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return obj;\n    },\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return JSON.stringify(this._strMapToObj(map));\n    },\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this3 = this;\n      // Todo:向后端提交作答信息数组answersMap\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          // 考试交卷，后端判分完成，然后跳转到我的考试界面\n          _this3.$notification.success({\n            message: '考卷提交成功！'\n          });\n          _this3.$router.push('/list/exam-record-list');\n          return res.data;\n        } else {\n          _this3.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    }\n  })\n};",null]}