{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue","mtime":1683548887962},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"../../plugins/bootstrap-table\";\nimport QuestionViewModal from \"./modules/QuestionViewModal\";\nimport QuestionEditModal from \"./modules/QuestionEditModal\";\nimport StepByStepQuestionModal from \"./modules/StepByStepQuestionModal\";\nimport { getQuestionAll, questionUpdate, getQuestionSelection } from \"../../api/exam\";\nimport SummernoteUpdateModal from '@views/list/modules/SummernoteUpdateModal';\nimport $ from 'jquery';\nexport default {\n  name: 'QuestionTableList',\n  components: {\n    SummernoteUpdateModal: SummernoteUpdateModal,\n    StepByStepQuestionModal: StepByStepQuestionModal,\n    QuestionViewModal: QuestionViewModal,\n    QuestionEditModal: QuestionEditModal\n  },\n  data: function data() {\n    var that = this; // 方便在bootstrap-table中引用methods\n    return {\n      // 表头\n      columns: [{\n        title: '序号',\n        field: 'serial',\n        formatter: function formatter(value, row, index) {\n          return index + 1; // 这样的话每翻一页都会重新从1开始，\n        }\n      }, {\n        title: '题干',\n        field: 'name',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-name\" style=\"height: 100%;width: 100%\">' + value + '</div>';\n        },\n        events: {\n          'click .question-name': function clickQuestionName(e, value, row, index) {\n            that.$refs.questionUpdateModal.edit('summernote-question-name-update', row, 'name', '更新题干', questionUpdate);\n          }\n        }\n      }, {\n        title: '解析',\n        field: 'description',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-desc\">' + value + '</div>';\n        },\n        events: {\n          'click .question-desc': function clickQuestionDesc(e, value, row, index) {\n            that.$refs.questionUpdateModal.edit('summernote-question-desc-update', row, 'description', '更新题目解析', questionUpdate);\n          }\n        }\n      }, {\n        title: '分数',\n        field: 'score',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-score\">' + value + '</div>';\n        },\n        events: {\n          'click .question-score': function clickQuestionScore(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            $element.html('<input type=\"text\" value=\"' + value + '\">');\n          }\n        }\n      }, {\n        title: '创建人',\n        field: 'creator'\n      }, {\n        title: '难度',\n        field: 'level',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-level\">' + value + '</div>';\n        },\n        events: {\n          'click .question-level': function clickQuestionLevel(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var levels = res.data.levels;\n                var inner = '<select>';\n                for (var i = 0; i < levels.length; i++) {\n                  if (levels[i].description === value) {\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\" selected=\"selected\">' + levels[i].description + '</option>';\n                  } else {\n                    inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\">' + levels[i].description + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '题型',\n        field: 'type',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-type\">' + value + '</div>';\n        },\n        events: {\n          'click .question-type': function clickQuestionType(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var types = res.data.types;\n                var inner = '<select>';\n                for (var i = 0; i < types.length; i++) {\n                  if (types[i].description === value) {\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\" selected=\"selected\">' + types[i].description + '</option>';\n                  } else {\n                    inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\">' + types[i].description + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '学科',\n        field: 'category',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-category\">' + value + '</div>';\n        },\n        events: {\n          'click .question-category': function clickQuestionCategory(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var categories = res.data.categories;\n                var inner = '<select>';\n                for (var i = 0; i < categories.length; i++) {\n                  if (categories[i].name === value) {\n                    // 学科还是用名字吧\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\" selected=\"selected\">' + categories[i].name + '</option>';\n                  } else {\n                    inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\">' + categories[i].name + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '更新时间',\n        field: 'updateTime'\n      }, {\n        title: '操作',\n        field: 'action',\n        align: 'center',\n        formatter: function formatter(value, row) {\n          return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' + '&nbsp;&nbsp;' + '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>';\n        },\n        events: {\n          'click .view-question': function clickViewQuestion(e, value, row, index) {\n            that.handleSub(row);\n          },\n          'click .edit-question': function clickEditQuestion(e, value, row, index) {\n            that.handleEdit(row);\n          }\n        }\n      }],\n      tableData: [],\n      // bootstrap-table的数据\n      // custom bootstrap-table\n      options: {\n        search: true,\n        showColumns: true,\n        showExport: true,\n        pagination: true,\n        toolbar: '#toolbar',\n        // 下面两行是支持高级搜索，即按照字段搜索\n        advancedSearch: true,\n        idTable: 'advancedTable',\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\n        // onClickRow: that.clickRow,\n        // onClickCell: that.clickCell // 单元格单击事件\n        onDblClickCell: that.dblClickCell // 单元格双击事件\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadAll(); // 加载所有问题的数据\n  },\n\n  methods: {\n    handleEdit: function handleEdit(record) {\n      this.$refs.modalEdit.edit(record);\n    },\n    handleSub: function handleSub(record) {\n      // 查看题目\n      console.log(record);\n      this.$refs.modalView.edit(record);\n    },\n    handleOk: function handleOk() {\n      this.loadAll(); // 加载所有问题的数据\n    },\n    dblClickCell: function dblClickCell(field, value, row, $element) {\n      if (field === 'score') {\n        // 更新分数\n        var childrenInput = $element.children('.question-score').children('input'); // 获取输入框的值\n        if (childrenInput.length === 0) return;\n        row.score = childrenInput[0].value;\n        var that = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-score').text(row.score);\n            that.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'level') {\n        // 更新难度\n        var childrenSelect = $element.children('.question-level').children('select'); // 获取输入框的值\n        if (childrenSelect.length === 0) return;\n        var optionSelected = $(childrenSelect[0]).find('option:selected');\n        row.levelId = optionSelected.val();\n        console.log(row.levelId);\n        row.level = optionSelected.text();\n        console.log(row.level);\n        var _that = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-level').text(row.level);\n            _that.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'type') {\n        // 更新题型\n        var _childrenSelect = $element.children('.question-type').children('select'); // 获取输入框的值\n        if (_childrenSelect.length === 0) return;\n        var _optionSelected = $(_childrenSelect[0]).find('option:selected');\n        row.typeId = _optionSelected.val();\n        row.type = _optionSelected.text();\n        var _that2 = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-type').text(row.type);\n            _that2.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'category') {\n        // 更新学科\n        var _childrenSelect2 = $element.children('.question-category').children('select'); // 获取输入框的值\n        console.log(_childrenSelect2);\n        if (_childrenSelect2.length === 0) return;\n        var _optionSelected2 = $(_childrenSelect2[0]).find('option:selected');\n        row.categoryId = _optionSelected2.val();\n        row.category = _optionSelected2.text();\n        var _that3 = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-category').text(row.category);\n            _that3.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n    },\n    loadAll: function loadAll() {\n      var that = this;\n      getQuestionAll().then(function (res) {\n        if (res.code === 0) {\n          that.tableData = res.data;\n          that.$refs.table._initTable();\n        } else {\n          that.$notification.error({\n            message: '获取全部问题的列表失败',\n            description: res.msg\n          });\n        }\n      });\n    }\n  }\n};",{"version":3,"names":["QuestionViewModal","QuestionEditModal","StepByStepQuestionModal","getQuestionAll","questionUpdate","getQuestionSelection","SummernoteUpdateModal","$","name","components","data","that","columns","title","field","formatter","value","row","index","width","events","clickQuestionName","e","$refs","questionUpdateModal","edit","clickQuestionDesc","clickQuestionScore","$element","target","html","clickQuestionLevel","children","length","then","res","console","log","code","levels","inner","i","description","id","$notification","error","message","msg","clickQuestionType","types","clickQuestionCategory","categories","align","clickViewQuestion","handleSub","clickEditQuestion","handleEdit","tableData","options","search","showColumns","showExport","pagination","toolbar","advancedSearch","idTable","onDblClickCell","dblClickCell","mounted","loadAll","methods","record","modalEdit","modalView","handleOk","childrenInput","score","text","success","childrenSelect","optionSelected","find","levelId","val","level","typeId","type","categoryId","category","table","_initTable"],"sources":["src/views/list/QuestionTableList.vue"],"sourcesContent":["<template>\r\n  <a-card :bordered=\"false\">\r\n    <div id=\"toolbar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"$refs.createQuestionModal.create()\">新建</a-button>&nbsp;\r\n      <a-button type=\"primary\" icon=\"reload\" @click=\"loadAll()\">全量刷新</a-button>\r\n    </div>\r\n    <BootstrapTable\r\n      ref=\"table\"\r\n      :columns=\"columns\"\r\n      :data=\"tableData\"\r\n      :options=\"options\"\r\n    />\r\n    <!-- ref是为了方便用this.$refs.modal直接引用，下同 -->\r\n    <step-by-step-question-modal ref=\"createQuestionModal\" @ok=\"handleOk\" />\r\n    <summernote-update-modal ref=\"questionUpdateModal\" @ok=\"handleOk\" />\r\n    <question-view-modal ref=\"modalView\" @ok=\"handleOk\" />\r\n    <question-edit-modal ref=\"modalEdit\" @ok=\"handleOk\" />\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\nimport '../../plugins/bootstrap-table'\r\nimport QuestionViewModal from './modules/QuestionViewModal'\r\nimport QuestionEditModal from './modules/QuestionEditModal'\r\nimport StepByStepQuestionModal from './modules/StepByStepQuestionModal'\r\nimport { getQuestionAll, questionUpdate, getQuestionSelection } from '../../api/exam'\r\nimport SummernoteUpdateModal from '@views/list/modules/SummernoteUpdateModal'\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n  name: 'QuestionTableList',\r\n  components: {\r\n    SummernoteUpdateModal,\r\n    StepByStepQuestionModal,\r\n    QuestionViewModal,\r\n    QuestionEditModal\r\n  },\r\n  data () {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          }\r\n        },\r\n        {\r\n          title: '题干',\r\n          field: 'name',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-name\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-name': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit('summernote-question-name-update', row, 'name', '更新题干', questionUpdate)\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '解析',\r\n          field: 'description',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-desc\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-desc': function (e, value, row, index) {\r\n              that.$refs.questionUpdateModal.edit('summernote-question-desc-update', row, 'description', '更新题目解析', questionUpdate)\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '分数',\r\n          field: 'score',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-score\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-score': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              $element.html('<input type=\"text\" value=\"' + value + '\">')\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '创建人',\r\n          field: 'creator'\r\n        },\r\n        {\r\n          title: '难度',\r\n          field: 'level',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-level': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then(res => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const levels = res.data.levels\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < levels.length; i++) {\r\n                    if (levels[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\" selected=\"selected\">' + levels[i].description + '</option>'\r\n                    } else {\r\n                      inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\">' + levels[i].description + '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '题型',\r\n          field: 'type',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-type': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then(res => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const types = res.data.types\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < types.length; i++) {\r\n                    if (types[i].description === value) {\r\n                      // 设置默认的选中值为当前的值\r\n                      inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\" selected=\"selected\">' + types[i].description + '</option>'\r\n                    } else {\r\n                      inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\">' + types[i].description + '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '学科',\r\n          field: 'category',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .question-category': function (e, value, row, index) {\r\n              const $element = $(e.target) // 把元素转换成html对象\r\n              if ($element.children().length > 0) return // 防止重复渲染\r\n              getQuestionSelection().then(res => {\r\n                console.log(res)\r\n                if (res.code === 0) {\r\n                  console.log(res.data)\r\n                  const categories = res.data.categories\r\n                  let inner = '<select>'\r\n                  for (let i = 0; i < categories.length; i++) {\r\n                    if (categories[i].name === value) { // 学科还是用名字吧\r\n                      // 设置默认的选中值为当前的值\r\n                      inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\" selected=\"selected\">' + categories[i].name + '</option>'\r\n                    } else {\r\n                      inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\">' + categories[i].name + '</option>'\r\n                    }\r\n                  }\r\n                  inner += '</select>'\r\n                  $element.html(inner)\r\n                } else {\r\n                  that.$notification.error({\r\n                    message: '获取问题下拉选项失败',\r\n                    description: res.msg\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '更新时间',\r\n          field: 'updateTime'\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n              '&nbsp;&nbsp;' +\r\n              '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        onDblClickCell: that.dblClickCell // 单元格双击事件\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    handleEdit (record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub (record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleOk () {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    dblClickCell (field, value, row, $element) {\r\n      if (field === 'score') { // 更新分数\r\n        const childrenInput = $element.children('.question-score').children('input') // 获取输入框的值\r\n        if (childrenInput.length === 0) return\r\n        row.score = childrenInput[0].value\r\n        const that = this\r\n        questionUpdate(row).then(res => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-score').text(row.score)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功'\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'level') { // 更新难度\r\n        const childrenSelect = $element.children('.question-level').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.levelId = optionSelected.val()\r\n        console.log(row.levelId)\r\n        row.level = optionSelected.text()\r\n        console.log(row.level)\r\n        const that = this\r\n        questionUpdate(row).then(res => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-level').text(row.level)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功'\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'type') { // 更新题型\r\n        const childrenSelect = $element.children('.question-type').children('select') // 获取输入框的值\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.typeId = optionSelected.val()\r\n        row.type = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then(res => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-type').text(row.type)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功'\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      if (field === 'category') { // 更新学科\r\n        const childrenSelect = $element.children('.question-category').children('select') // 获取输入框的值\r\n        console.log(childrenSelect)\r\n        if (childrenSelect.length === 0) return\r\n        const optionSelected = $(childrenSelect[0]).find('option:selected')\r\n        row.categoryId = optionSelected.val()\r\n        row.category = optionSelected.text()\r\n        const that = this\r\n        questionUpdate(row).then(res => {\r\n          // 成功就跳转到结果页面\r\n          console.log(res)\r\n          if (res.code === 0) {\r\n            $element.children('.question-category').text(row.category)\r\n            that.$notification.success({\r\n              message: '更新成功',\r\n              description: '更新成功'\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    loadAll () {\r\n      const that = this\r\n      getQuestionAll()\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            that.tableData = res.data\r\n            that.$refs.table._initTable()\r\n          } else {\r\n            that.$notification.error({\r\n              message: '获取全部问题的列表失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"}]}