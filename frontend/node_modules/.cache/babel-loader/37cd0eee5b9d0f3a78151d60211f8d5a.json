{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\views\\list\\QuestionTableList.vue","mtime":1683548887962},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"../../plugins/bootstrap-table\";\nimport QuestionViewModal from \"./modules/QuestionViewModal\";\nimport QuestionEditModal from \"./modules/QuestionEditModal\";\nimport StepByStepQuestionModal from \"./modules/StepByStepQuestionModal\";\nimport { getQuestionAll, questionUpdate, getQuestionSelection } from \"../../api/exam\";\nimport SummernoteUpdateModal from '@views/list/modules/SummernoteUpdateModal';\nimport $ from 'jquery';\nexport default {\n  name: 'QuestionTableList',\n  components: {\n    SummernoteUpdateModal: SummernoteUpdateModal,\n    StepByStepQuestionModal: StepByStepQuestionModal,\n    QuestionViewModal: QuestionViewModal,\n    QuestionEditModal: QuestionEditModal\n  },\n  data: function data() {\n    var that = this; // 方便在bootstrap-table中引用methods\n    return {\n      // 表头\n      columns: [{\n        title: '序号',\n        field: 'serial',\n        formatter: function formatter(value, row, index) {\n          return index + 1; // 这样的话每翻一页都会重新从1开始，\n        }\n      }, {\n        title: '题干',\n        field: 'name',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-name\" style=\"height: 100%;width: 100%\">' + value + '</div>';\n        },\n        events: {\n          'click .question-name': function clickQuestionName(e, value, row, index) {\n            that.$refs.questionUpdateModal.edit('summernote-question-name-update', row, 'name', '更新题干', questionUpdate);\n          }\n        }\n      }, {\n        title: '解析',\n        field: 'description',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-desc\">' + value + '</div>';\n        },\n        events: {\n          'click .question-desc': function clickQuestionDesc(e, value, row, index) {\n            that.$refs.questionUpdateModal.edit('summernote-question-desc-update', row, 'description', '更新题目解析', questionUpdate);\n          }\n        }\n      }, {\n        title: '分数',\n        field: 'score',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-score\">' + value + '</div>';\n        },\n        events: {\n          'click .question-score': function clickQuestionScore(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            $element.html('<input type=\"text\" value=\"' + value + '\">');\n          }\n        }\n      }, {\n        title: '创建人',\n        field: 'creator'\n      }, {\n        title: '难度',\n        field: 'level',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-level\">' + value + '</div>';\n        },\n        events: {\n          'click .question-level': function clickQuestionLevel(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var levels = res.data.levels;\n                var inner = '<select>';\n                for (var i = 0; i < levels.length; i++) {\n                  if (levels[i].description === value) {\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\" selected=\"selected\">' + levels[i].description + '</option>';\n                  } else {\n                    inner += '<option value =\"' + levels[i].id + '\" name=\"' + levels[i].name + '\">' + levels[i].description + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '题型',\n        field: 'type',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-type\">' + value + '</div>';\n        },\n        events: {\n          'click .question-type': function clickQuestionType(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var types = res.data.types;\n                var inner = '<select>';\n                for (var i = 0; i < types.length; i++) {\n                  if (types[i].description === value) {\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\" selected=\"selected\">' + types[i].description + '</option>';\n                  } else {\n                    inner += '<option value =\"' + types[i].id + '\" name=\"' + types[i].name + '\">' + types[i].description + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '学科',\n        field: 'category',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-category\">' + value + '</div>';\n        },\n        events: {\n          'click .question-category': function clickQuestionCategory(e, value, row, index) {\n            var $element = $(e.target); // 把元素转换成html对象\n            if ($element.children().length > 0) return; // 防止重复渲染\n            getQuestionSelection().then(function (res) {\n              console.log(res);\n              if (res.code === 0) {\n                console.log(res.data);\n                var categories = res.data.categories;\n                var inner = '<select>';\n                for (var i = 0; i < categories.length; i++) {\n                  if (categories[i].name === value) {\n                    // 学科还是用名字吧\n                    // 设置默认的选中值为当前的值\n                    inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\" selected=\"selected\">' + categories[i].name + '</option>';\n                  } else {\n                    inner += '<option value =\"' + categories[i].id + '\" name=\"' + categories[i].description + '\">' + categories[i].name + '</option>';\n                  }\n                }\n                inner += '</select>';\n                $element.html(inner);\n              } else {\n                that.$notification.error({\n                  message: '获取问题下拉选项失败',\n                  description: res.msg\n                });\n              }\n            });\n          }\n        }\n      }, {\n        title: '更新时间',\n        field: 'updateTime'\n      }, {\n        title: '操作',\n        field: 'action',\n        align: 'center',\n        formatter: function formatter(value, row) {\n          return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' + '&nbsp;&nbsp;' + '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>';\n        },\n        events: {\n          'click .view-question': function clickViewQuestion(e, value, row, index) {\n            that.handleSub(row);\n          },\n          'click .edit-question': function clickEditQuestion(e, value, row, index) {\n            that.handleEdit(row);\n          }\n        }\n      }],\n      tableData: [],\n      // bootstrap-table的数据\n      // custom bootstrap-table\n      options: {\n        search: true,\n        showColumns: true,\n        showExport: true,\n        pagination: true,\n        toolbar: '#toolbar',\n        // 下面两行是支持高级搜索，即按照字段搜索\n        advancedSearch: true,\n        idTable: 'advancedTable',\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\n        // onClickRow: that.clickRow,\n        // onClickCell: that.clickCell // 单元格单击事件\n        onDblClickCell: that.dblClickCell // 单元格双击事件\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadAll(); // 加载所有问题的数据\n  },\n\n  methods: {\n    handleEdit: function handleEdit(record) {\n      this.$refs.modalEdit.edit(record);\n    },\n    handleSub: function handleSub(record) {\n      // 查看题目\n      console.log(record);\n      this.$refs.modalView.edit(record);\n    },\n    handleOk: function handleOk() {\n      this.loadAll(); // 加载所有问题的数据\n    },\n    dblClickCell: function dblClickCell(field, value, row, $element) {\n      if (field === 'score') {\n        // 更新分数\n        var childrenInput = $element.children('.question-score').children('input'); // 获取输入框的值\n        if (childrenInput.length === 0) return;\n        row.score = childrenInput[0].value;\n        var that = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-score').text(row.score);\n            that.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'level') {\n        // 更新难度\n        var childrenSelect = $element.children('.question-level').children('select'); // 获取输入框的值\n        if (childrenSelect.length === 0) return;\n        var optionSelected = $(childrenSelect[0]).find('option:selected');\n        row.levelId = optionSelected.val();\n        console.log(row.levelId);\n        row.level = optionSelected.text();\n        console.log(row.level);\n        var _that = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-level').text(row.level);\n            _that.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'type') {\n        // 更新题型\n        var _childrenSelect = $element.children('.question-type').children('select'); // 获取输入框的值\n        if (_childrenSelect.length === 0) return;\n        var _optionSelected = $(_childrenSelect[0]).find('option:selected');\n        row.typeId = _optionSelected.val();\n        row.type = _optionSelected.text();\n        var _that2 = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-type').text(row.type);\n            _that2.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n      if (field === 'category') {\n        // 更新学科\n        var _childrenSelect2 = $element.children('.question-category').children('select'); // 获取输入框的值\n        console.log(_childrenSelect2);\n        if (_childrenSelect2.length === 0) return;\n        var _optionSelected2 = $(_childrenSelect2[0]).find('option:selected');\n        row.categoryId = _optionSelected2.val();\n        row.category = _optionSelected2.text();\n        var _that3 = this;\n        questionUpdate(row).then(function (res) {\n          // 成功就跳转到结果页面\n          console.log(res);\n          if (res.code === 0) {\n            $element.children('.question-category').text(row.category);\n            _that3.$notification.success({\n              message: '更新成功',\n              description: '更新成功'\n            });\n          }\n        });\n      }\n    },\n    loadAll: function loadAll() {\n      var that = this;\n      getQuestionAll().then(function (res) {\n        if (res.code === 0) {\n          that.tableData = res.data;\n          that.$refs.table._initTable();\n        } else {\n          that.$notification.error({\n            message: '获取全部问题的列表失败',\n            description: res.msg\n          });\n        }\n      });\n    }\n  }\n};",null]}