{"remainingRequest":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\permission.js","dependencies":[{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\src\\permission.js","mtime":1683548887951},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\babel.config.js","mtime":1683548887923},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\IT\\projectOfweb\\spring-boot-online-exam\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport _defineProperty from \"D:/IT/projectOfweb/spring-boot-online-exam/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Vue from 'vue';\nimport router from \"./router\";\nimport store from \"./store\";\nimport NProgress from 'nprogress'; // progress bar\nimport 'nprogress/nprogress.css'; // progress bar style\nimport notification from 'ant-design-vue/es/notification';\nimport { setDocumentTitle, domTitle } from \"./utils/domUtil\";\nimport { ACCESS_TOKEN } from \"./store/mutation-types\";\nNProgress.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\nvar whiteList = ['login', 'register', 'registerResult']; // no redirect whitelist, 免登录白名单\n\nrouter.beforeEach(function (to, from, next) {\n  NProgress.start(); // start progress bar\n  to.meta && typeof to.meta.title !== 'undefined' && setDocumentTitle(\"\".concat(to.meta.title, \" - \").concat(domTitle));\n  if (Vue.ls.get(ACCESS_TOKEN)) {\n    /* has token, 有token,即用户已经登录 */\n    if (to.path === '/user/login') {\n      // 如果用户想访问登录界面就直接跳到首页\n      next({\n        path: '/dashboard/workplace'\n      });\n      NProgress.done();\n    } else {\n      // 用户已经登录，且访问地不是登录页面，那么就进行权限校验，看看用户有没有权限访问这个页面\n      if (store.getters.roles.length === 0) {\n        // 如果store还没有用户的角色属性(可以在Vue的Chrome组件中看Vuex)，那就请求\n        store.dispatch('GetInfo') // 登陆后访问除登录以外的任何一个页面都会先调用GetInfo方法，看看用户的权限是否有资格访问\n        .then(function (res) {\n          var roles = res.data && res.data.role; // 响应不为空，而且含有role属性\n          store.dispatch('GenerateRoutes', {\n            roles: roles\n          }).then(function () {\n            // 遍历roles，生成路由\n            // 根据roles权限生成可访问的路由表\n            // 动态添加可访问路由表\n            router.addRoutes(store.getters.addRouters);\n            var redirect = decodeURIComponent(from.query.redirect || to.path);\n            if (to.path === redirect) {\n              // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n              next(_objectSpread(_objectSpread({}, to), {}, {\n                replace: true\n              }));\n            } else {\n              // 跳转到目的路由\n              next({\n                path: redirect\n              });\n            }\n          });\n        }).catch(function () {\n          notification.error({\n            message: '错误',\n            description: '请求用户信息失败，请重试'\n          });\n          store.dispatch('Logout').then(function () {\n            next({\n              path: '/user/login',\n              query: {\n                redirect: to.fullPath\n              }\n            });\n          });\n        });\n      } else {\n        next();\n      }\n    }\n  } else {\n    if (whiteList.includes(to.name)) {\n      // 在免登录白名单，直接进入\n      next();\n    } else {\n      next({\n        path: '/user/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n      NProgress.done(); // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n});\n\nrouter.afterEach(function () {\n  NProgress.done(); // finish progress bar\n});",null]}